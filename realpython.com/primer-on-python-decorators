

<!doctype html>
<html lang="en">
  <head>
    
    
    <link href="https://files.realpython.com" rel="preconnect">

    <title>Primer on Python Decorators – Real Python</title>
    <meta name="author" content="Real Python">
    <meta name="description" content="In this tutorial, you&#x27;ll look at what Python decorators are and how you define and use them. Decorators can make your code more readable and reusable. Come take a look at how decorators work under the hood and practice writing your own decorators.">
    <meta name="keywords" content="">

    
  


    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover">

    
      <link rel="stylesheet" href="/static/realpython.min.f440503857fc.css">
      <link rel="stylesheet" href="/static/gfonts/font.5ac42994de49.css">
      <link rel="preload" href="/static/glightbox.min.9b438b29cef1.css" as="style" onload="this.onload=null;this.rel='stylesheet'"><noscript><link rel="stylesheet" href="/static/glightbox.min.9b438b29cef1.css"></noscript>
      
    

    
  
  <link rel="preload" as="image" href="https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg" imagesrcset="/cdn-cgi/image/width=480,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 480w, /cdn-cgi/image/width=640,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 640w, /cdn-cgi/image/width=960,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 960w, /cdn-cgi/image/width=1920,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 1920w" imagesizes="(min-width: 1200px) 690px, (min-width: 780px) calc(-5vw + 669px), (min-width: 580px) 510px, calc(100vw - 30px)">


    
    
      <link rel="canonical" href="https://realpython.com/primer-on-python-decorators/">

      
      
        <meta name="twitter:card" content="summary_large_image">
        <meta name="twitter:image" content="https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg">
        <meta property="og:image" content="https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg">
      
      <meta name="twitter:creator" content="@realpython">
      <meta name="twitter:site" content="@realpython">
      <meta property="og:title" content="Primer on Python Decorators – Real Python">
      <meta property="og:type" content="article">
      <meta property="og:url" content="https://realpython.com/primer-on-python-decorators/">
      <meta property="og:description" content="In this tutorial, you&#x27;ll look at what Python decorators are and how you define and use them. Decorators can make your code more readable and reusable. Come take a look at how decorators work under the hood and practice writing your own decorators.">
    

    <link href="/static/favicon.68cbf4197b0c.png" rel="icon">
    <link href="https://realpython.com/atom.xml" rel="alternate" title="Real Python" type="application/atom+xml">
    <link rel="manifest" href="/manifest.json">

    

    
    

    
    <script id="icons-data" type="application/json">{"iconsUrl": "/static/icons.654fd44c148d.svg"}</script>
    <script id="optins-data" type="application/json">{"turnstileSiteKey": "0x4AAAAAAAQQUCLRXBi8NnUh"}</script>

    
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  

  ga('create', 'UA-35184939-1', 'auto', {'allowLinker': true});

  

  

  
  
  ga('set', {
    dimension1: false,
    dimension2: false
  });
  

  ga('send', 'pageview');
  
</script>


<script async src="https://www.googletagmanager.com/gtag/js?id=G-L7L6L5F6Y6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-L7L6L5F6Y6');

  
</script>

  </head>
  <body >
    
      

<nav class="navbar fixed-top navbar-expand-lg navbar-dark flex-column  user-select-none">
  <div class="container flex-row">

    <a class="navbar-brand" href="/">
      <img src="/static/real-python-logo.893c30edea53.svg" width="165" height="40" class="d-inline-block align-top" alt="Real Python">
    </a>

    
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse navbar-nav-scroll" id="navbarSupportedContent" role="navigation" aria-label="Main Navigation">

      <ul class="navbar-nav mr-2">

        <li class="nav-item">
          <a class="nav-link rounded" href="/start-here/">Start&nbsp;Here</a>
        </li>

        <li class="nav-item dropdown">
          <a class="nav-link rounded dropdown-toggle" href="#" id="navbarDropdownLibrary" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--python"/></svg></span> Learn Python
          </a>
          <div class="dropdown-menu" aria-labelledby="navbarDropdownLibrary">
            
<a class="dropdown-item " href="/search?kind=article&kind=course&order=newest" style="color: #ff7e73; line-height: 110%;"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--graduation-cap"/></svg></span>Python Tutorials&nbsp;→<br><small class="text-secondary">In-depth articles and video courses</small></a>


            
<a class="dropdown-item " href="/learning-paths/" style="color: #ffc873; line-height: 110%;"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@learning-path"/></svg></span>Learning Paths&nbsp;→<br><small class="text-secondary">Guided study plans for accelerated learning</small></a>


            
<a class="dropdown-item " href="/quizzes/" style="color: #abe0e5; line-height: 110%;"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@quiz"/></svg></span>Quizzes&nbsp;→<br><small class="text-secondary">Check your learning progress</small></a>


            
<a class="dropdown-item " href="/tutorials/all/" style="color: #ccc; line-height: 110%;"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@category"/></svg></span>Browse Topics&nbsp;→<br><small class="text-secondary">Focus on a specific area or skill level</small></a>


            
<a class="dropdown-item " href="/community/" style="color: #e5c6ab; line-height: 110%;"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--message-smile"/></svg></span>Community Chat&nbsp;→<br><small class="text-secondary">Learn with other Pythonistas</small></a>


            
<a class="dropdown-item " href="/office-hours/" style="color: #e5c6ab; line-height: 110%;"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--users"/></svg></span>Office Hours&nbsp;→<br><small class="text-secondary">Live Q&A calls with Python experts</small></a>


            
<a class="dropdown-item " href="/podcasts/rpp/" style="color: #b8abe5; line-height: 110%;"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@podcast"/></svg></span>Podcast&nbsp;→<br><small class="text-secondary">Hear what’s new in the world of Python</small></a>


            
<a class="dropdown-item " href="/products/books/" style="color: #abe5b1; line-height: 110%;"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--book-heart"/></svg></span>Books&nbsp;→<br><small class="text-secondary">Round out your knowledge and learn offline</small></a>


            
              
              
<a class="dropdown-item border-top text-warning" href="/account/join/" style="line-height: 110%;"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--star"/></svg></span>Unlock All Content&nbsp;→</a>

            
          </div>
        </li>

        <li class="nav-item dropdown">
          <a class="nav-link rounded dropdown-toggle" href="#" id="navbarDropdownMore" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            More
          </a>
          <div class="dropdown-menu" aria-labelledby="navbarDropdownMore">
            <a class="dropdown-item" href="/learner-stories/">Learner Stories</a>
            <a class="dropdown-item" href="/newsletter/">Python Newsletter</a>
            <a class="dropdown-item" href="https://www.pythonjobshq.com" target="_blank">Python Job Board</a>
            <a class="dropdown-item" href="/team/">Meet the Team</a>
            <a class="dropdown-item" href="/write-for-us/">Become a Tutorial Writer</a>
            <a class="dropdown-item" href="/become-an-instructor/">Become a Video Instructor</a>
          </div>
        </li>

      </ul> 

      
      <div class="d-block d-lg-none"> 
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link rounded" href="/search" title="Search"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#v4--search"/></svg></span> Search</a>
          </li>
        </ul>
      </div>
      
      <div class="d-none d-lg-flex align-items-center mr-2 flex-fill">
        <form class="form-inline w-100 position-relative" action="/search" method="GET">
          <a class="js-search-form-submit position-absolute" href="/search" title="Search" aria-hidden="true" tabindex="-1"><span class="icon baseline text-muted pl-2" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#v4--search"/></svg></span></a>
          <input class="search-autocomplete search-field form-control form-control-md mr-sm-1 mr-lg-2 w-100" style="padding-left: 2rem;" maxlength=50 type="search" placeholder="Search" aria-label="Search" aria-keyshortcuts="/ Control+J Meta+J" name="q" autocomplete="off">
          <span class="search-hotkey-indicator position-absolute px-2 border border-input text-input rounded small user-select-none" style="right: 1em;" title="Press / (forward slash) or Ctrl+J to open search" aria-hidden="true">/</span>
          <input type="hidden" name="_from" value="nav">
        </form>
      </div>
      

      <ul class="navbar-nav ml-auto">
        
          <li class="nav-item form-inline mr-2 my-2 ml-3 ml-lg-0">
            <a class="btn btn-sm btn-primary px-5 px-lg-3" href="/account/join/">Join</a>
          </li>
        

        
          <li class="nav-item">
            <a class="nav-link rounded mx-0 px-lg-2" href="/account/login/?next=%2Fprimer-on-python-decorators%2F">Sign&#8209;In</a>
          </li>
        
      </ul>

    
    </div>

  </div>

  

</nav>

    

    <div class="container main-content">
      

      
  <div class="row justify-content-center">

    
    <aside class="col-md-7 col-lg-4 order-2 d-none d-lg-block">
      
  




<div class="card mb-3 bg-secondary">
  <form class="card-body" action="/optins/process/" method="post">
    <div class="form-group">
      <p class="h5 text-muted text-center">— FREE Email Series —</p>
      <p class="h3 text-center">🐍 Python Tricks 💌</p>
      <p><img loading="lazy" class="img-fluid rounded" src="/static/pytrick-dict-merge.4201a0125a5e.png" width="738" height="490" alt="Python Tricks Dictionary Merge"></p>
    </div>
    <div class="form-group">
      <input type="hidden" name="csrfmiddlewaretoken" value="jaRCD1qNE7h0Rglie9ArcHoUUSahtVK5zZxzbvs2BBfBkDNgTjpQqVixahX4SG29">
      <input type="hidden" name="slug" value="static-python-tricks-sidebar">
      <input type="email" class="form-control form-control-md" name="email" placeholder="Email&hellip;" required>
    </div>
    <button type="submit" name="submit" class="btn btn-primary btn-md btn-block">Get Python Tricks »</button>
    <p class="mb-0 mt-2 text-muted text-center">🔒 No spam. Unsubscribe any time.</p>
  </form>
</div>


  


<div class="sidebar-module sidebar-module-inset border">
  <a href="/tutorials/all/" class="badge badge-light text-muted"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@category"/></svg></span>Browse Topics</a>

  <a href="/learning-paths/" class="badge badge-light text-muted"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--map-location-dot"/></svg></span>Guided Learning Paths</a>

  <br>

  <a href="/search?level=basics" class="badge badge-light text-muted"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@level"/></svg></span> Basics</a>

  <a href="/search?level=intermediate" class="badge badge-light text-muted"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@level"/></svg></span><span class="icon baseline tight-left" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@level"/></svg></span> Intermediate</a>

  <a href="/search?level=advanced" class="badge badge-light text-muted"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@level"/></svg></span><span class="icon baseline tight-left" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@level"/></svg></span><span class="icon baseline tight-left" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@level"/></svg></span> Advanced</a>

  <hr class="my-2">

  
    
  
    
  
    
  
    
      
<a href="/tutorials/api/" class="badge badge-light text-muted">api</a>

    
  
    
      
<a href="/tutorials/best-practices/" class="badge badge-light text-muted">best-practices</a>

    
  
    
      
<a href="/tutorials/career/" class="badge badge-light text-muted">career</a>

    
  
    
      
<a href="/tutorials/community/" class="badge badge-light text-muted">community</a>

    
  
    
      
<a href="/tutorials/databases/" class="badge badge-light text-muted">databases</a>

    
  
    
      
<a href="/tutorials/data-science/" class="badge badge-light text-muted">data-science</a>

    
  
    
      
<a href="/tutorials/data-structures/" class="badge badge-light text-muted">data-structures</a>

    
  
    
      
<a href="/tutorials/data-viz/" class="badge badge-light text-muted">data-viz</a>

    
  
    
      
<a href="/tutorials/devops/" class="badge badge-light text-muted">devops</a>

    
  
    
      
<a href="/tutorials/django/" class="badge badge-light text-muted">django</a>

    
  
    
      
<a href="/tutorials/docker/" class="badge badge-light text-muted">docker</a>

    
  
    
      
<a href="/tutorials/editors/" class="badge badge-light text-muted">editors</a>

    
  
    
      
<a href="/tutorials/flask/" class="badge badge-light text-muted">flask</a>

    
  
    
      
<a href="/tutorials/front-end/" class="badge badge-light text-muted">front-end</a>

    
  
    
      
<a href="/tutorials/gamedev/" class="badge badge-light text-muted">gamedev</a>

    
  
    
      
<a href="/tutorials/gui/" class="badge badge-light text-muted">gui</a>

    
  
    
      
<a href="/tutorials/machine-learning/" class="badge badge-light text-muted">machine-learning</a>

    
  
    
      
<a href="/tutorials/numpy/" class="badge badge-light text-muted">numpy</a>

    
  
    
      
<a href="/tutorials/projects/" class="badge badge-light text-muted">projects</a>

    
  
    
      
<a href="/tutorials/python/" class="badge badge-light text-muted">python</a>

    
  
    
      
<a href="/tutorials/testing/" class="badge badge-light text-muted">testing</a>

    
  
    
      
<a href="/tutorials/tools/" class="badge badge-light text-muted">tools</a>

    
  
    
      
<a href="/tutorials/web-dev/" class="badge badge-light text-muted">web-dev</a>

    
  
    
      
<a href="/tutorials/web-scraping/" class="badge badge-light text-muted">web-scraping</a>

    
  
</div>



  
<div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
  
<div style="display:block;position:relative;">
  <div style="display:block;width:100%;padding-top:100%;"></div>
  <div class="rpad" data-unit="1x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>


</div>



  <div class="sidebar-sticky ">
    
      <div class="bg-light sidebar-module sidebar-module-inset" id="sidebar-toc">
        <p class="h4 text-muted"><a class="link-unstyled" href="#toc">Table of Contents</a></p>
        <div class="toc">
<ul>
<li><a href="#python-functions">Python Functions</a><ul>
<li><a href="#first-class-objects">First-Class Objects</a></li>
<li><a href="#inner-functions">Inner Functions</a></li>
<li><a href="#functions-as-return-values">Functions as Return Values</a></li>
</ul>
</li>
<li><a href="#simple-decorators-in-python">Simple Decorators in Python</a><ul>
<li><a href="#adding-syntactic-sugar">Adding Syntactic Sugar</a></li>
<li><a href="#reusing-decorators">Reusing Decorators</a></li>
<li><a href="#decorating-functions-with-arguments">Decorating Functions With Arguments</a></li>
<li><a href="#returning-values-from-decorated-functions">Returning Values From Decorated Functions</a></li>
<li><a href="#finding-yourself">Finding Yourself</a></li>
</ul>
</li>
<li><a href="#a-few-real-world-examples">A Few Real World Examples</a><ul>
<li><a href="#timing-functions">Timing Functions</a></li>
<li><a href="#debugging-code">Debugging Code</a></li>
<li><a href="#slowing-down-code">Slowing Down Code</a></li>
<li><a href="#registering-plugins">Registering Plugins</a></li>
<li><a href="#authenticating-users">Authenticating Users</a></li>
</ul>
</li>
<li><a href="#fancy-decorators">Fancy Decorators</a><ul>
<li><a href="#decorating-classes">Decorating Classes</a></li>
<li><a href="#nesting-decorators">Nesting Decorators</a></li>
<li><a href="#defining-decorators-with-arguments">Defining Decorators With Arguments</a></li>
<li><a href="#creating-decorators-with-optional-arguments">Creating Decorators With Optional Arguments</a></li>
<li><a href="#tracking-state-in-decorators">Tracking State in Decorators</a></li>
<li><a href="#using-classes-as-decorators">Using Classes as Decorators</a></li>
</ul>
</li>
<li><a href="#more-real-world-examples">More Real-World Examples</a><ul>
<li><a href="#slowing-down-code-revisited">Slowing Down Code, Revisited</a></li>
<li><a href="#creating-singletons">Creating Singletons</a></li>
<li><a href="#caching-return-values">Caching Return Values</a></li>
<li><a href="#adding-information-about-units">Adding Information About Units</a></li>
<li><a href="#validating-json">Validating JSON</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#further-reading">Further Reading</a></li>
</ul>
</div>

      </div>
    

    <div class="sidebar-module sidebar-module-inset d-flex justify-content-center flex-wrap row-gap-1 col-gap-2 my-3 py-0">
      
<div class="jsCompletionStatusWidget btn-group mb-0">
  <button title="Click to mark as completed" class="jsBtnCompletion btn btn-secondary border-right " style="border-top-right-radius: 0; border-bottom-right-radius: 0;" disabled>Mark as Completed</button>
  <button title="Add bookmark" class="jsBtnBookmark btn btn-secondary border-left" disabled><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#light--bookmark"/></svg></span></button>
</div>

      <div class="w-100"></div> 
      
<div class="btn-group mb-0">
  <a class="btn btn-secondary border-right" style="border-top-right-radius: 0; border-bottom-right-radius: 0;" title="Liked it" role="button" aria-label="Thumbs up (liked it)" href="/feedback/survey/article/primer-on-python-decorators/liked/?from=article-sidebar" target="_blank"><span class="icon" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#light--thumbs-up"/></svg></span></a> 
  <a class="btn btn-secondary border-left" role="button" aria-label="Thumbs down (disliked it)" title="Disliked it" href="/feedback/survey/article/primer-on-python-decorators/disliked/?from=article-sidebar" target="_blank"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#light--thumbs-down"/></svg></span></a>
</div>

      
        













<share-button>
  <button class="btn btn-secondary" type="button" title="Share" aria-label="Share"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@share-light"/></svg></span>Share</button>
  <template>
    
    <div class="d-flex flex-wrap justify-content-center justify-content-md-between flex-column flex-md-row gap-1">
      <a target="_blank" rel="nofollow" href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn share-linkedin" aria-label="Share on LinkedIn"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--linkedin"/></svg></span>LinkedIn</a>

      <a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Interesting%20%23Python%20article%20by%20%40realpython%3A&amp;url=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn share-x-twitter" aria-label="Share on Twitter"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--x-twitter"/></svg></span>Twitter</a>

      <a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn share-facebook" aria-label="Share on Facebook"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--facebook"/></svg></span>Facebook</a>

      

      <a target="_blank" rel="nofollow" href="mailto:?subject=Python%20article%20for%20you&amp;body=Check%20out%20this%20Python%20article%3A%0A%0APrimer%20on%20Python%20Decorators%0A%0Ahttps%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F%0A" class="btn share-email" aria-label="Share on Email"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--envelope"/></svg></span>Email</a>
    </div>

    <div class="mt-4">
      




<copyable-text>
  <label for="copyable-text-share">Or copy the link:</label>
  <div class="input-group">
    <input id="copyable-text-share" type="text" class="form-control text-truncate" value="https://realpython.com/primer-on-python-decorators/" data-copy-source>
    <div class="input-group-append d-print-none">
      <button type="button" class="btn btn-secondary btn-input-addon" title="Copy to Clipboard" data-copy-trigger>
        <span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span>Copy
      </button>
    </div>
  </div>
  <template data-copy-success-content>
    <span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#v4--check"/></svg></span>Copied!
  </template>
</copyable-text>

    </div>

    <div class="text-center mt-4 user-select-none">
      <small><span class="icon baseline text-color-red" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--heart"/></svg></span> Happy Pythoning!</small>
    </div>
  </template>
</share-button>


      
    </div>

    
      <div class="sidebar-module sidebar-module-inset border card">
        <p><span class="badge badge-pill badge-success"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#v4--play-circle"/></svg></span> Recommended Video Course</span><br><a class="stretched-link text-success" href="/courses/python-decorators-101/">Python Decorators 101</a></p>
      </div>
    

    
      <div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
        
<div style="display:block;position:relative;">
  <div style="display:block;width:100%;padding-top:25%;"></div>
  <div class="rpad" data-unit="4x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>


      </div>
    

    
  </div>


    </aside>

    <div class="col-md-11 col-lg-8 article with-headerlinks">
      

  
    <figure class="embed-responsive embed-responsive-16by9 rounded">
      
        <img class="card-img-top m-0 p-0 embed-responsive-item" style="object-fit: contain; background: #abe5b2;" alt="Python Decorators" width="1920" height="1080" src="https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg" srcset="/cdn-cgi/image/width=480,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 480w, /cdn-cgi/image/width=640,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 640w, /cdn-cgi/image/width=960,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 960w, /cdn-cgi/image/width=1920,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 1920w" sizes="(min-width: 1200px) 690px, (min-width: 780px) calc(-5vw + 669px), (min-width: 580px) 510px, calc(100vw - 30px)" fetchpriority="high">
      
    </figure>
  

  <h1>Primer on Python Decorators</h1>
  <div class="mb-0">
    
      <span class="text-muted">by <a class="text-muted" href="#author">Geir Arne Hjelle</a>
    
    
      <span class="icon baseline ml-2" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#v4--clock-o"/></svg></span> Feb 12, 2024
    
    
      <span class="icon baseline ml-2 mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--comments"/></svg></span><a class="text-muted" href="#reader-comments"><span class="disqus-comment-count" data-disqus-identifier="https://realpython.com/primer-on-python-decorators/"></span></a>
    
    

    <span class="d-inline d-md-block"> 
      <span class="icon baseline ml-2 ml-md-0" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@category"/></svg></span>
      
        
<a href="/tutorials/intermediate/" class="badge badge-light text-muted">intermediate</a>

      
        
<a href="/tutorials/python/" class="badge badge-light text-muted">python</a>

      
    </span>

    <div class="d-flex justify-content-between gap-2 my-3">
      
<div class="jsCompletionStatusWidget btn-group mb-0">
  <button title="Click to mark as completed" class="jsBtnCompletion btn btn-secondary border-right " style="border-top-right-radius: 0; border-bottom-right-radius: 0;" disabled>Mark as Completed</button>
  <button title="Add bookmark" class="jsBtnBookmark btn btn-secondary border-left" disabled><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#light--bookmark"/></svg></span></button>
</div>

      
        













<share-button>
  <button class="btn btn-secondary" type="button" title="Share" aria-label="Share"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@share-light"/></svg></span>Share</button>
  <template>
    
    <div class="d-flex flex-wrap justify-content-center justify-content-md-between flex-column flex-md-row gap-1">
      <a target="_blank" rel="nofollow" href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn share-linkedin" aria-label="Share on LinkedIn"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--linkedin"/></svg></span>LinkedIn</a>

      <a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Interesting%20%23Python%20article%20by%20%40realpython%3A&amp;url=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn share-x-twitter" aria-label="Share on Twitter"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--x-twitter"/></svg></span>Twitter</a>

      <a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn share-facebook" aria-label="Share on Facebook"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--facebook"/></svg></span>Facebook</a>

      

      <a target="_blank" rel="nofollow" href="mailto:?subject=Python%20article%20for%20you&amp;body=Check%20out%20this%20Python%20article%3A%0A%0APrimer%20on%20Python%20Decorators%0A%0Ahttps%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F%0A" class="btn share-email" aria-label="Share on Email"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--envelope"/></svg></span>Email</a>
    </div>

    <div class="mt-4">
      




<copyable-text>
  <label for="copyable-text-share">Or copy the link:</label>
  <div class="input-group">
    <input id="copyable-text-share" type="text" class="form-control text-truncate" value="https://realpython.com/primer-on-python-decorators/" data-copy-source>
    <div class="input-group-append d-print-none">
      <button type="button" class="btn btn-secondary btn-input-addon" title="Copy to Clipboard" data-copy-trigger>
        <span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span>Copy
      </button>
    </div>
  </div>
  <template data-copy-success-content>
    <span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#v4--check"/></svg></span>Copied!
  </template>
</copyable-text>

    </div>

    <div class="text-center mt-4 user-select-none">
      <small><span class="icon baseline text-color-red" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--heart"/></svg></span> Happy Pythoning!</small>
    </div>
  </template>
</share-button>


      
    </div>
  </div>

  

  <div class="article-body">
    
      <div class="bg-light sidebar-module sidebar-module-inset" id="toc">
        <p class="h3 mb-2 text-muted">Table of Contents</p>
        <div class="toc">
<ul>
<li><a href="#python-functions">Python Functions</a><ul>
<li><a href="#first-class-objects">First-Class Objects</a></li>
<li><a href="#inner-functions">Inner Functions</a></li>
<li><a href="#functions-as-return-values">Functions as Return Values</a></li>
</ul>
</li>
<li><a href="#simple-decorators-in-python">Simple Decorators in Python</a><ul>
<li><a href="#adding-syntactic-sugar">Adding Syntactic Sugar</a></li>
<li><a href="#reusing-decorators">Reusing Decorators</a></li>
<li><a href="#decorating-functions-with-arguments">Decorating Functions With Arguments</a></li>
<li><a href="#returning-values-from-decorated-functions">Returning Values From Decorated Functions</a></li>
<li><a href="#finding-yourself">Finding Yourself</a></li>
</ul>
</li>
<li><a href="#a-few-real-world-examples">A Few Real World Examples</a><ul>
<li><a href="#timing-functions">Timing Functions</a></li>
<li><a href="#debugging-code">Debugging Code</a></li>
<li><a href="#slowing-down-code">Slowing Down Code</a></li>
<li><a href="#registering-plugins">Registering Plugins</a></li>
<li><a href="#authenticating-users">Authenticating Users</a></li>
</ul>
</li>
<li><a href="#fancy-decorators">Fancy Decorators</a><ul>
<li><a href="#decorating-classes">Decorating Classes</a></li>
<li><a href="#nesting-decorators">Nesting Decorators</a></li>
<li><a href="#defining-decorators-with-arguments">Defining Decorators With Arguments</a></li>
<li><a href="#creating-decorators-with-optional-arguments">Creating Decorators With Optional Arguments</a></li>
<li><a href="#tracking-state-in-decorators">Tracking State in Decorators</a></li>
<li><a href="#using-classes-as-decorators">Using Classes as Decorators</a></li>
</ul>
</li>
<li><a href="#more-real-world-examples">More Real-World Examples</a><ul>
<li><a href="#slowing-down-code-revisited">Slowing Down Code, Revisited</a></li>
<li><a href="#creating-singletons">Creating Singletons</a></li>
<li><a href="#caching-return-values">Caching Return Values</a></li>
<li><a href="#adding-information-about-units">Adding Information About Units</a></li>
<li><a href="#validating-json">Validating JSON</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#further-reading">Further Reading</a></li>
</ul>
</div>

      </div>
    

    
    <div class="sidebar-module sidebar-module-inset p-0" style="overflow:hidden;">
      

<div style="display:block;position:relative;">
  <div style="display:block;width:100%;padding-top:12.5%;"></div>
  <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>
<a class="small text-muted" href="/account/join/" rel="nofollow"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"/></svg></span>Remove ads</a>


    </div>
    

    
      
<div class="border rounded p-3 card mb-2 text-wrap-pretty">
  <p class="mb-0"><span class="badge badge-pill badge-success"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#v4--play-circle"/></svg></span> Watch Now</span> This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: <a class="stretched-link text-success" href="/courses/python-decorators-101/"><strong>Python Decorators 101</strong></a></p>
</div>

    

    <p>In this tutorial on Python decorators, you&rsquo;ll learn what they are and how to create and use them. Decorators provide a simple syntax for calling <a href="http://en.wikipedia.org/wiki/Higher-order_function">higher-order functions</a>.</p>
<p>By definition, a decorator is a function that takes another function and extends the behavior of the latter function without explicitly modifying it. This sounds confusing, but it&rsquo;ll make more sense after you&rsquo;ve seen a few examples of how decorators work. </p>
<p><strong>In this tutorial, you&rsquo;ll learn:</strong></p>
<ul>
<li>What it means for functions to be <strong>first-class objects</strong></li>
<li>How to define functions so they can be used as <strong>decorators</strong></li>
<li>Which <strong>practical use cases</strong> can be tackled with decorators</li>
<li>How to create decorators so that they follow <strong>best practices</strong></li>
</ul>
<p>You can find all the examples from this tutorial by downloading the accompanying materials below:</p>
<div class="alert alert-warning" role="alert">
<p><strong markdown="1">Get Your Code:</strong> <a href="https://realpython.com/bonus/primer-on-python-decorators-code/" class="alert-link" data-toggle="modal" data-target="#modal-primer-on-python-decorators-code" data-focus="false" markdown="1">Click here to download the free sample code</a> that shows you how to create and use Python decorators.</p>
</div>
<div class="alert alert-warning" role="alert"><p><strong>Free Bonus:</strong> <a href="" class="alert-link" data-toggle="modal" data-target="#modal-power-of-decorators-fixed" data-focus="false">Click here to get access to a free "The Power of Python Decorators" guide</a> that shows you three advanced decorator patterns and techniques you can use to write cleaner and more Pythonic programs.</p></div>

<div class="alert alert-warning" role="alert">
<p><strong markdown="1">Decorators Cheat Sheet:</strong> <a href="https://realpython.com/bonus/decorators-cheatsheet/" class="alert-link" data-toggle="modal" data-target="#modal-decorators-cheatsheet" data-focus="false" markdown="1">Click here to get access to a free three-page Python decorators cheat sheet</a> that summarizes the techniques explained in this tutorial.</p>
</div>
<div class="alert alert-warning" role="alert">
<p><strong markdown="1">Decorators Q&amp;A Transcript:</strong> <a href="https://realpython.com/bonus/decorators-qa-2019/" class="alert-link" data-toggle="modal" data-target="#modal-decorators-qa-2019" data-focus="false" markdown="1">Click here to get access to a 25-page chat log from our Python decorators Q&amp;A session</a> in the Real Python Community Slack where we discussed common decorator questions.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><mark class="marker-highlight"><strong><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@quiz"/></svg></span> Take the Quiz:</strong></mark> Test your knowledge with our interactive “Decorators” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr>

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/decorators/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img class="card-img-top m-0 p-0 embed-responsive-item rounded" style="object-fit: contain; background: #abe5b2;" alt="Python Decorators" src="https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg" width="1920" height="1080" srcset="/cdn-cgi/image/width=480,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 480w, /cdn-cgi/image/width=640,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 640w, /cdn-cgi/image/width=960,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 960w, /cdn-cgi/image/width=1920,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 1920w" sizes="(min-width: 1200px) 142px, (min-width: 1000px) 122px, (min-width: 780px) 112px, (min-width: 580px) 139px, calc(100vw - 62px)">


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light" style="opacity: 0.90;"><span class="icon baseline scale2x" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@quiz"/></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a href="/quizzes/decorators/" class="stretched-link"><span class="my-0 h4">Decorators</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you&#x27;ll revisit the foundational concepts of what Python decorators are and how to create and use them.</p>
    </div>
  </div>

</div>

<section class="section2"><h2 id="python-functions">Python Functions<a class="headerlink" href="#python-functions" title="Permanent link"></a></h2>
<p>In order to understand decorators, you must first understand some finer points of how functions work. There are many aspects to functions, but in the context of decorators, <strong>a function returns a value based on the given arguments</strong>. Here&rsquo;s a basic example:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">add_one</span><span class="p">(</span><span class="n">number</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">number</span> <span class="o">+</span> <span class="mi">1</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">add_one</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="go">3</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>In general, functions in Python may also have side effects rather than just turning an input into an output. <a href="https://realpython.com/python-print/">The <code>print()</code> function</a> is an example of this: it <a href="https://realpython.com/python-return-statement/">returns</a> <a href="https://realpython.com/null-in-python/"><code>None</code></a> while having the side effect of outputting something to the console. However, to understand decorators, it&rsquo;s enough to think about functions as tools that turn given arguments into values.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div><section class="section3"><h3 id="first-class-objects">First-Class Objects<a class="headerlink" href="#first-class-objects" title="Permanent link"></a></h3>
<p>In <a href="https://realpython.com/python-functional-programming/">functional programming</a>, you work almost entirely with pure functions that don&rsquo;t have side effects. While not a purely functional language, Python supports many functional programming concepts, including treating functions as <a href="https://dbader.org/blog/python-first-class-functions">first-class objects</a>. </p>
<p>This means that <em>functions can be passed around and used as arguments</em>, just like <a href="https://realpython.com/python-data-types/">any other object like <code>str</code>, <code>int</code>, <code>float</code>, <code>list</code>, and so on</a>. Consider the following three functions:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">greeters.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">say_hello</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>

<span class="k">def</span> <span class="nf">be_awesome</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Yo </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">, together we&#39;re the awesomest!&quot;</span>

<span class="k">def</span> <span class="nf">greet_bob</span><span class="p">(</span><span class="n">greeter_func</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">greeter_func</span><span class="p">(</span><span class="s2">&quot;Bob&quot;</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Here, <code>say_hello()</code> and <code>be_awesome()</code> are regular functions that expect a name given as a string. The <code>greet_bob()</code> function, however, expects a function as its argument. You can, for example, pass it the <code>say_hello()</code> or the <code>be_awesome()</code> function.</p>
<p>To test your functions, you can run your code in interactive mode. You do this with the <code>-i</code> flag. For example, if your code is in a file named <code>greeters.py</code>, then you run <code>python -i greeters.py</code>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">greet_bob</span><span class="p">(</span><span class="n">say_hello</span><span class="p">)</span>
<span class="go">&#39;Hello Bob&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">greet_bob</span><span class="p">(</span><span class="n">be_awesome</span><span class="p">)</span>
<span class="go">&#39;Yo Bob, together we&#39;re the awesomest!&#39;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Note that <code>greet_bob(say_hello)</code> refers to two functions, <code>greet_bob()</code> and <code>say_hello</code>, but in different ways. The <code>say_hello</code> function is named without parentheses. This means that only a reference to the function is passed. The function isn&rsquo;t executed. The <code>greet_bob()</code> function, on the other hand, is written with parentheses, so it will be called as usual.</p>
<p>This is an important distinction that&rsquo;s crucial for how functions work as first-class objects. A function name without parentheses is a reference to a function, while a function name with trailing parentheses calls the function and refers to its return value.</p>
</section><section class="section3"><h3 id="inner-functions">Inner Functions<a class="headerlink" href="#inner-functions" title="Permanent link"></a></h3>
<p>It&rsquo;s possible to <a href="https://realpython.com/defining-your-own-python-function/">define functions</a> <em>inside other functions</em>. Such functions are called <a href="https://realpython.com/inner-functions-what-are-they-good-for/">inner functions</a>. Here&rsquo;s an example of a function with two inner functions:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">inner_functions.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">parent</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Printing from parent()&quot;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">first_child</span><span class="p">():</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Printing from first_child()&quot;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">second_child</span><span class="p">():</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Printing from second_child()&quot;</span><span class="p">)</span>

    <span class="n">second_child</span><span class="p">()</span>
    <span class="n">first_child</span><span class="p">()</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>What happens when you call the <code>parent()</code> function? Think about this for a minute. Then run <code>inner_functions.py</code> in interactive mode to try it out. The output will be as follows:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">parent</span><span class="p">()</span>
<span class="go">Printing from parent()</span>
<span class="go">Printing from second_child()</span>
<span class="go">Printing from first_child()</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Note that the order in which the inner functions are defined does not matter. Like with any other functions, the printing only happens when the inner functions are executed.</p>
<p>Furthermore, the inner functions aren&rsquo;t defined until the parent function is called. They&rsquo;re <a href="https://realpython.com/python-scope-legb-rule/">locally scoped</a> to <code>parent()</code>, meaning they only exist inside the <code>parent()</code> function as local <a href="https://realpython.com/python-variables/">variables</a>. Try calling <code>first_child()</code>. You&rsquo;ll get an error:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">first_child</span><span class="p">()</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">  </span><span class="c">...</span>
<span class="gr">NameError</span>: <span class="n">name &#39;first_child&#39; is not defined</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Whenever you call <code>parent()</code>, the inner functions <code>first_child()</code> and <code>second_child()</code> are also called. But because of their local scope, they aren&rsquo;t available outside of the <code>parent()</code> function.</p>
</section><section class="section3"><h3 id="functions-as-return-values">Functions as Return Values<a class="headerlink" href="#functions-as-return-values" title="Permanent link"></a></h3>
<p>Python also allows you to return functions from functions. In the following example, you rewrite <code>parent()</code> to return one of the inner functions:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">inner_functions.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">parent</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">first_child</span><span class="p">():</span>
        <span class="k">return</span> <span class="s2">&quot;Hi, I&#39;m Elias&quot;</span>

    <span class="k">def</span> <span class="nf">second_child</span><span class="p">():</span>
        <span class="k">return</span> <span class="s2">&quot;Call me Ester&quot;</span>

    <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">first_child</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">second_child</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Note that you&rsquo;re returning <code>first_child</code> without the parentheses. Recall that this means that you&rsquo;re <em>returning a reference to the function</em> <code>first_child</code>. In contrast, <code>first_child()</code> with parentheses refers to the result of evaluating the function. You can see this in the following example:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">first</span> <span class="o">=</span> <span class="n">parent</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">second</span> <span class="o">=</span> <span class="n">parent</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">first</span>
<span class="go">&lt;function parent.&lt;locals&gt;.first_child at 0x7f599f1e2e18&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">second</span>
<span class="go">&lt;function parent.&lt;locals&gt;.second_child at 0x7f599dad5268&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The somewhat cryptic output means that the <code>first</code> variable refers to the local <code>first_child()</code> function inside of <code>parent()</code>, while <code>second</code> points to <code>second_child()</code>.</p>
<p>You can now use <code>first</code> and <code>second</code> as if they&rsquo;re regular functions, even though you can&rsquo;t directly access the functions they point to:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">first</span><span class="p">()</span>
<span class="go">&#39;Hi, I&#39;m Elias&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">second</span><span class="p">()</span>
<span class="go">&#39;Call me Ester&#39;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You recognize the return values of the inner functions that you defined inside of <code>parent()</code>.</p>
<p>Finally, note that in the earlier example, you executed the inner functions within the parent function&mdash;for example, <code>first_child()</code>. However, in this last example, you didn&rsquo;t add parentheses to the inner functions, such as <code>first_child</code>, upon returning.  That way, you got a reference to each function that you could call in the future.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div></section></section><section class="section2"><h2 id="simple-decorators-in-python">Simple Decorators in Python<a class="headerlink" href="#simple-decorators-in-python" title="Permanent link"></a></h2>
<p>Now that you&rsquo;ve seen that functions are just like any other object in Python, you&rsquo;re ready to move on and see the magical beast that is the Python decorator. You&rsquo;ll start with an example:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">hello_decorator.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Something is happening before the function is called.&quot;</span><span class="p">)</span>
        <span class="n">func</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Something is happening after the function is called.&quot;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapper</span>

<span class="k">def</span> <span class="nf">say_whee</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Whee!&quot;</span><span class="p">)</span>

<span class="n">say_whee</span> <span class="o">=</span> <span class="n">decorator</span><span class="p">(</span><span class="n">say_whee</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Here, you&rsquo;ve defined two regular functions, <code>decorator()</code> and <code>say_whee()</code>, and one inner <code>wrapper()</code> function. Then you redefined <code>say_whee()</code> to apply <code>decorator()</code> to the original <code>say_whee()</code>.</p>
<p>Can you guess what happens when you call <code>say_whee()</code>? Try it in a REPL. Instead of running the file with the <code>-i</code> flag, you can also import the function manually:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">hello_decorator</span> <span class="kn">import</span> <span class="n">say_whee</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="p">()</span>
<span class="go">Something is happening before the function is called.</span>
<span class="go">Whee!</span>
<span class="go">Something is happening after the function is called.</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>To understand what&rsquo;s going on here, look back at the earlier examples. You&rsquo;re applying everything that you&rsquo;ve learned so far.</p>
<p>The so-called decoration happens at the following line:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="n">say_whee</span> <span class="o">=</span> <span class="n">decorator</span><span class="p">(</span><span class="n">say_whee</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>In effect, the name <code>say_whee</code> now points to the <code>wrapper()</code> inner function. Remember that you return <code>wrapper</code> as a function when you call <code>decorator(say_whee)</code>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span>
<span class="go">&lt;function decorator.&lt;locals&gt;.wrapper at 0x7f3c5dfd42f0&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>However, <code>wrapper()</code> has a reference to the original <code>say_whee()</code> as <code>func</code>, and it calls that function between the two calls to <code>print()</code>.</p>
<p>Put simply, <em>a decorator wraps a function, modifying its behavior.</em></p>
<p>Before moving on, have a look at a second example. Because <code>wrapper()</code> is a regular Python function, the way a decorator modifies a function can change dynamically. So as not to disturb your neighbors, the following example will only run the decorated code during the day:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">quiet_night.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="k">def</span> <span class="nf">not_during_the_night</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
        <span class="k">if</span> <span class="mi">7</span> <span class="o">&lt;=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">22</span><span class="p">:</span>
            <span class="n">func</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">pass</span>  <span class="c1"># Hush, the neighbors are asleep</span>
    <span class="k">return</span> <span class="n">wrapper</span>

<span class="k">def</span> <span class="nf">say_whee</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Whee!&quot;</span><span class="p">)</span>

<span class="n">say_whee</span> <span class="o">=</span> <span class="n">not_during_the_night</span><span class="p">(</span><span class="n">say_whee</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>If you try to call <code>say_whee()</code> after bedtime, nothing will happen:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">quiet_night</span> <span class="kn">import</span> <span class="n">say_whee</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="p">()</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Here, <code>say_whee()</code> doesn&rsquo;t print any output. That&rsquo;s because the <code>if</code> test failed, so the wrapper didn&rsquo;t call <code>func()</code>, the original <code>say_whee()</code>.</p>
<section class="section3"><h3 id="adding-syntactic-sugar">Adding Syntactic Sugar<a class="headerlink" href="#adding-syntactic-sugar" title="Permanent link"></a></h3>
<p>Look back at the code that you wrote in <code>hello_decorator.py</code>. The way you decorated <code>say_whee()</code> is a little clunky. First of all, you end up typing the name <code>say_whee</code> three times. Additionally, the decoration gets hidden away below the definition of the function.</p>
<p>Instead, Python allows you to <em>use decorators in a simpler way with the <code>@</code> symbol</em>, sometimes called the <a href="https://www.python.org/dev/peps/pep-0318/#background">pie syntax</a>. The following example does the exact same thing as the first decorator example:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">hello_decorator.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Something is happening before the function is called.&quot;</span><span class="p">)</span>
        <span class="n">func</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Something is happening after the function is called.&quot;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapper</span>

<span class="nd">@decorator</span>
<span class="k">def</span> <span class="nf">say_whee</span><span class="p">():</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Whee!&quot;</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>So, <code>@decorator</code> is just a shorter way of saying <code>say_whee = decorator(say_whee)</code>. It&rsquo;s how you apply a decorator to a function.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div></section><section class="section3"><h3 id="reusing-decorators">Reusing Decorators<a class="headerlink" href="#reusing-decorators" title="Permanent link"></a></h3>
<p>Recall that a decorator is just a regular Python function. All the usual tools for reusability are available. Now, you&rsquo;ll create a <a href="https://realpython.com/python-modules-packages/">module</a> where you store your decorators and that you can use in many other functions.</p>
<p>Create a file called <code>decorators.py</code> with the following content:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">do_twice</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper_do_twice</span><span class="p">():</span>
        <span class="n">func</span><span class="p">()</span>
        <span class="n">func</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">wrapper_do_twice</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The <code>do_twice()</code> decorator calls the decorated function twice. You&rsquo;ll soon see the effect of this in several examples.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> You can name your inner function whatever you want, and a generic name like <code>wrapper()</code> is usually okay. You&rsquo;ll see a lot of decorators in this tutorial. To keep them apart, you&rsquo;ll name the inner function with the same name as the decorator but with a <code>wrapper_</code> prefix.</p>
</div>
<p>You can now use this new decorator in other files by doing a regular <a href="https://realpython.com/absolute-vs-relative-python-imports/">import</a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">do_twice</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@do_twice</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">say_whee</span><span class="p">():</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Whee!&quot;</span><span class="p">)</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>When you run this example, you should see that the original <code>say_whee()</code> is executed twice:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="p">()</span>
<span class="go">Whee!</span>
<span class="go">Whee!</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>There are two <em>Whee!</em> exclamations printed, confirming that <code>@do_twice</code> does what it says on the tin.</p>
<div class="alert alert-warning" role="alert"><p><strong>Free Bonus:</strong> <a href="" class="alert-link" data-toggle="modal" data-target="#modal-power-of-decorators-fixed" data-focus="false">Click here to get access to a free "The Power of Python Decorators" guide</a> that shows you three advanced decorator patterns and techniques you can use to write cleaner and more Pythonic programs.</p></div>

</section><section class="section3"><h3 id="decorating-functions-with-arguments">Decorating Functions With Arguments<a class="headerlink" href="#decorating-functions-with-arguments" title="Permanent link"></a></h3>
<p>Say that you have a function that accepts some arguments. Can you still decorate it? Give it a try:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">do_twice</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@do_twice</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You now apply <code>@do_twice</code> to <code>greet()</code>, which expects a name. Unfortunately, calling this function raises an error:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;World&quot;</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">  </span><span class="c">...</span>
<span class="gr">TypeError</span>: <span class="n">wrapper_do_twice() takes 0 positional arguments but 1 was given</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The problem is that the inner function <code>wrapper_do_twice()</code> doesn&rsquo;t take any arguments, but you passed <code>name="World"</code> to it. You could fix this by letting <code>wrapper_do_twice()</code> accept one argument, but then it wouldn&rsquo;t work for the <code>say_whee()</code> function that you created earlier.</p>
<p>The solution is to use <a href="https://realpython.com/python-kwargs-and-args/"><code>*args</code> and <code>**kwargs</code></a> in the inner wrapper function. Then it&rsquo;ll accept an arbitrary number of positional and keyword arguments. Rewrite <code>decorators.py</code> as follows:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">do_twice</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="hll">    <span class="k">def</span> <span class="nf">wrapper_do_twice</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="hll">        <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="hll">        <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span>    <span class="k">return</span> <span class="n">wrapper_do_twice</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The <code>wrapper_do_twice()</code> inner function now accepts any number of arguments and passes them on to the function that it decorates. Now both your <code>say_whee()</code> and <code>greet()</code> examples work. Start a fresh REPL:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">do_twice</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@do_twice</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">say_whee</span><span class="p">():</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Whee!&quot;</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="p">()</span>
<span class="go">Whee!</span>
<span class="go">Whee!</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@do_twice</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s2">&quot;World&quot;</span><span class="p">)</span>
<span class="go">Hello World</span>
<span class="go">Hello World</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You use the same decorator, <code>@do_twice</code>, to decorate two different functions. This hints at one of the powers of decorators. They add behavior that can apply to many different functions.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div></section><section class="section3"><h3 id="returning-values-from-decorated-functions">Returning Values From Decorated Functions<a class="headerlink" href="#returning-values-from-decorated-functions" title="Permanent link"></a></h3>
<p>What happens to the return value of decorated functions? Well, that&rsquo;s up to the decorator to decide. Say you decorate a simple function as follows:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">do_twice</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@do_twice</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">return_greeting</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Creating greeting&quot;</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Hi </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Try to use it:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">hi_adam</span> <span class="o">=</span> <span class="n">return_greeting</span><span class="p">(</span><span class="s2">&quot;Adam&quot;</span><span class="p">)</span>
<span class="go">Creating greeting</span>
<span class="go">Creating greeting</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="p">(</span><span class="n">hi_adam</span><span class="p">)</span>
<span class="go">None</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Oops, your decorator ate the return value from the function.</p>
<p>Because the <code>do_twice_wrapper()</code> doesn&rsquo;t explicitly return a value, the call <code>return_greeting("Adam")</code> ends up returning <code>None</code>.</p>
<p>To fix this, you need to <em>make sure the wrapper function returns the return value of the decorated function</em>. Change your <code>decorators.py</code> file:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">do_twice</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrapper_do_twice</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="hll">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span>    <span class="k">return</span> <span class="n">wrapper_do_twice</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Now you return the return value of the last call of the decorated function. Check out the example again:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">do_twice</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@do_twice</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">return_greeting</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Creating greeting&quot;</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Hi </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">return_greeting</span><span class="p">(</span><span class="s2">&quot;Adam&quot;</span><span class="p">)</span>
<span class="go">Creating greeting</span>
<span class="go">Creating greeting</span>
<span class="hll"><span class="go">&#39;Hi Adam&#39;</span>
</span></code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>This time, <code>return_greeting()</code> returns the greeting <code>'Hi Adam'</code>.</p>
</section><section class="section3"><h3 id="finding-yourself">Finding Yourself<a class="headerlink" href="#finding-yourself" title="Permanent link"></a></h3>
<p>A great convenience when working with Python, especially in the interactive shell, is its powerful introspection ability. <a href="https://en.wikipedia.org/wiki/Type_introspection">Introspection</a> is the ability of an object to know about its own attributes at runtime. For instance, a function knows its own name and <a href="https://realpython.com/documenting-python-code/">documentation</a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span>
<span class="go">&lt;built-in function print&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">print</span><span class="o">.</span><span class="vm">__name__</span>
<span class="go">&#39;print&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="nb">print</span><span class="p">)</span>
<span class="go">Help on built-in function print in module builtins:</span>

<span class="go">print(...)</span>
<span class="go">    &lt;full help message&gt;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>When you inspect <code>print()</code>, you can see its name and documentation. The introspection works for functions that you define yourself as well:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span>
<span class="go">&lt;function do_twice.&lt;locals&gt;.wrapper_do_twice at 0x7f43700e52f0&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="o">.</span><span class="vm">__name__</span>
<span class="go">&#39;wrapper_do_twice&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="n">say_whee</span><span class="p">)</span>
<span class="go">Help on function wrapper_do_twice in module decorators:</span>

<span class="go">wrapper_do_twice()</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>However, after being decorated, <code>say_whee()</code> has gotten very confused about its identity. It now reports being the <code>wrapper_do_twice()</code> inner function inside the <code>do_twice()</code> decorator. Although technically true, this isn&rsquo;t very useful information.</p>
<p>To fix this, decorators should use the <a href="https://docs.python.org/library/functools.html#functools.wraps"><code>@functools.wraps</code></a> decorator, which will preserve information about the original function. Update <code>decorators.py</code> again:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="hll"><span class="kn">import</span> <span class="nn">functools</span>
</span>
<span class="k">def</span> <span class="nf">do_twice</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="hll">    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span>    <span class="k">def</span> <span class="nf">wrapper_do_twice</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapper_do_twice</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You don&rsquo;t need to change anything about the decorated <code>say_whee()</code> function, but you need to restart your REPL to see the effect:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">do_twice</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@do_twice</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">say_whee</span><span class="p">():</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Whee!&quot;</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span>
<span class="go">&lt;function say_whee at 0x7ff79a60f2f0&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="o">.</span><span class="vm">__name__</span>
<span class="go">&#39;say_whee&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="n">say_whee</span><span class="p">)</span>
<span class="go">Help on function say_whee in module whee:</span>

<span class="go">say_whee()</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Much better! Now <code>say_whee()</code> is still itself after decoration.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> The <code>@functools.wraps</code> decorator uses <a href="https://docs.python.org/3/library/functools.html#functools.update_wrapper"><code>functools.update_wrapper()</code></a> to update <a href="https://github.com/python/cpython/blob/v3.12.1/Lib/functools.py#L32">special attributes</a> like <code>__name__</code> and <code>__doc__</code> that are used in the introspection.</p>
</div>
<p>You&rsquo;ve now learned the basics of how to create a decorator. However, <code>@do_twice</code> isn&rsquo;t a very exciting decorator, and there aren&rsquo;t a lot of use cases for it. In the next section, you&rsquo;ll implement several decorators that illustrate what you know so far and that you can use in your own code.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div></section></section><section class="section2"><h2 id="a-few-real-world-examples">A Few Real World Examples<a class="headerlink" href="#a-few-real-world-examples" title="Permanent link"></a></h2>
<p>You&rsquo;ll now look at a few more useful examples of decorators. You&rsquo;ll notice that they&rsquo;ll mainly follow the same pattern that you&rsquo;ve learned so far:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>

<span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper_decorator</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="c1"># Do something before</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="c1"># Do something after</span>
        <span class="k">return</span> <span class="n">value</span>
    <span class="k">return</span> <span class="n">wrapper_decorator</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>This formula is a good boilerplate template for building more complex decorators.</p>
<p>You&rsquo;ll continue to store your decorators in <code>decorators.py</code>. Recall that you can download all the examples in this tutorial:</p>
<div class="alert alert-warning" role="alert">
<p><strong markdown="1">Get Your Code:</strong> <a href="https://realpython.com/bonus/primer-on-python-decorators-code/" class="alert-link" data-toggle="modal" data-target="#modal-primer-on-python-decorators-code" data-focus="false" markdown="1">Click here to download the free sample code</a> that shows you how to create and use Python decorators.</p>
</div>
<section class="section3"><h3 id="timing-functions">Timing Functions<a class="headerlink" href="#timing-functions" title="Permanent link"></a></h3>
<p>You&rsquo;ll start by creating a <code>@timer</code> decorator. It&rsquo;ll measure the time a function takes to execute and then print the duration to the console. Here&rsquo;s the code:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">functools</span>
<span class="linenos"> 2</span><span class="kn">import</span> <span class="nn">time</span>
<span class="linenos"> 3</span>
<span class="linenos"> 4</span><span class="c1"># ...</span>
<span class="linenos"> 5</span>
<span class="linenos"> 6</span><span class="k">def</span> <span class="nf">timer</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="linenos"> 7</span><span class="w">    </span><span class="sd">&quot;&quot;&quot;Print the runtime of the decorated function&quot;&quot;&quot;</span>
<span class="linenos"> 8</span>    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
<span class="linenos"> 9</span>    <span class="k">def</span> <span class="nf">wrapper_timer</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="linenos">10</span>        <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">perf_counter</span><span class="p">()</span>
<span class="linenos">11</span>        <span class="n">value</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="linenos">12</span>        <span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">perf_counter</span><span class="p">()</span>
<span class="linenos">13</span>        <span class="n">run_time</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>
<span class="linenos">14</span>        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Finished </span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">() in </span><span class="si">{</span><span class="n">run_time</span><span class="si">:</span><span class="s2">.4f</span><span class="si">}</span><span class="s2"> secs&quot;</span><span class="p">)</span>
<span class="linenos">15</span>        <span class="k">return</span> <span class="n">value</span>
<span class="linenos">16</span>    <span class="k">return</span> <span class="n">wrapper_timer</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>This decorator works by storing the time just before the function starts running in line 10 and just after the function finishes in line 12. The runtime of the function is then the difference between the two, calculated in line 13. You use <a href="https://docs.python.org/library/time.html#time.perf_counter"><code>time.perf_counter()</code></a>, which does a good job of measuring time intervals.</p>
<p>Now, add <code>waste_some_time()</code> as an example of a function that spends some time, so that you can test <code>@timer</code>. Here are some examples of timings:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">timer</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@timer</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">waste_some_time</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
<span class="gp">... </span>        <span class="nb">sum</span><span class="p">([</span><span class="n">number</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10_000</span><span class="p">)])</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">waste_some_time</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="go">Finished waste_some_time() in 0.0010 secs</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">waste_some_time</span><span class="p">(</span><span class="mi">999</span><span class="p">)</span>
<span class="go">Finished waste_some_time() in 0.3260 secs</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Run it yourself. Work through the definition of <code>@timer</code> line by line. Make sure you understand how it works. Don&rsquo;t worry if you don&rsquo;t get everything, though. Decorators are advanced beings. Try to sleep on it or make a drawing of the program flow.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> The <code>@timer</code> decorator is great if you just want to get an idea about the runtime of your functions. If you want to do more precise measurements of code, then you should instead consider the <a href="https://docs.python.org/library/timeit.html"><code>timeit</code> module</a> in the standard library. It temporarily disables <a href="https://realpython.com/python-memory-management/#garbage-collection">garbage collection</a> and runs multiple trials to strip out noise from short function calls.</p>
</div>
<p>If you&rsquo;re interested in learning more about timing functions, then have a look at <a href="https://realpython.com/python-timer/">Python Timer Functions: Three Ways to Monitor Your Code</a>.</p>
</section><section class="section3"><h3 id="debugging-code">Debugging Code<a class="headerlink" href="#debugging-code" title="Permanent link"></a></h3>
<p>The following <code>@debug</code> decorator will print a function&rsquo;s arguments and its return value every time you call the function:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">functools</span>
<span class="linenos"> 2</span>
<span class="linenos"> 3</span><span class="c1"># ...</span>
<span class="linenos"> 4</span>
<span class="linenos"> 5</span><span class="k">def</span> <span class="nf">debug</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="linenos"> 6</span><span class="w">    </span><span class="sd">&quot;&quot;&quot;Print the function signature and return value&quot;&quot;&quot;</span>
<span class="linenos"> 7</span>    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
<span class="linenos"> 8</span>    <span class="k">def</span> <span class="nf">wrapper_debug</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="linenos"> 9</span>        <span class="n">args_repr</span> <span class="o">=</span> <span class="p">[</span><span class="nb">repr</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">args</span><span class="p">]</span>
<span class="linenos">10</span>        <span class="n">kwargs_repr</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s2">=</span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>
<span class="linenos">11</span>        <span class="n">signature</span> <span class="o">=</span> <span class="s2">&quot;, &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">args_repr</span> <span class="o">+</span> <span class="n">kwargs_repr</span><span class="p">)</span>
<span class="linenos">12</span>        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Calling </span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">(</span><span class="si">{</span><span class="n">signature</span><span class="si">}</span><span class="s2">)&quot;</span><span class="p">)</span>
<span class="linenos">13</span>        <span class="n">value</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="linenos">14</span>        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;</span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">() returned </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="linenos">15</span>        <span class="k">return</span> <span class="n">value</span>
<span class="linenos">16</span>    <span class="k">return</span> <span class="n">wrapper_debug</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The signature is created by joining the <a href="https://realpython.com/python-repr-vs-str/">string representations</a> of all the argument:</p>
<ul>
<li><strong>Line 9:</strong> You create a list of the positional arguments. Use <code>repr()</code> to get a nice string representing each argument.</li>
<li><strong>Line 10:</strong> You create a list of the keyword arguments. The <a href="https://realpython.com/python-f-strings/">f-string</a> formats each argument as <code>key=value</code>, and again, you use <code>repr()</code> to represent the value.</li>
<li><strong>Line 11:</strong> You join together the lists of positional and keyword arguments to one signature string with each argument separated by a comma.</li>
<li><strong>Line 14:</strong> You print the return value after the function is executed.</li>
</ul>
<p>It&rsquo;s time to see how the decorator works in practice by applying it to a simple function with one positional and one keyword argument:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">debug</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@debug</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">make_greeting</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="n">age</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
<span class="gp">... </span>        <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Howdy </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">!&quot;</span>
<span class="gp">... </span>    <span class="k">else</span><span class="p">:</span>
<span class="gp">... </span>        <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Whoa </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">! </span><span class="si">{</span><span class="n">age</span><span class="si">}</span><span class="s2"> already, you&#39;re growing up!&quot;</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Note how the <code>@debug</code> decorator prints the signature and return value of the <code>make_greeting()</code> function:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">make_greeting</span><span class="p">(</span><span class="s2">&quot;Benjamin&quot;</span><span class="p">)</span>
<span class="go">Calling make_greeting(&#39;Benjamin&#39;)</span>
<span class="go">make_greeting() returned &#39;Howdy Benjamin!&#39;</span>
<span class="go">&#39;Howdy Benjamin!&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">make_greeting</span><span class="p">(</span><span class="s2">&quot;Juan&quot;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">114</span><span class="p">)</span>
<span class="go">Calling make_greeting(&#39;Juan&#39;, age=114)</span>
<span class="go">make_greeting() returned &#39;Whoa Juan! 114 already, you&#39;re growing up!&#39;</span>
<span class="go">&#39;Whoa Juan! 114 already, you&#39;re growing up!&#39;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">make_greeting</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&quot;Maria&quot;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">116</span><span class="p">)</span>
<span class="go">Calling make_greeting(name=&#39;Maria&#39;, age=116)</span>
<span class="go">make_greeting() returned &#39;Whoa Maria! 116 already, you&#39;re growing up!&#39;</span>
<span class="go">&#39;Whoa Maria! 116 already, you&#39;re growing up!&#39;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>This example might not seem immediately useful since the <code>@debug</code> decorator just repeats what you wrote. It&rsquo;s more powerful when applied to small convenience functions that you don&rsquo;t call directly yourself.</p>
<p>The following example calculates an approximation of the <a href="https://en.wikipedia.org/wiki/E_(mathematical_constant)">mathematical constant <em>e</em></a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">calculate_e.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">math</span>
<span class="linenos"> 2</span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">debug</span>
<span class="linenos"> 3</span>
<span class="hll"><span class="linenos"> 4</span><span class="n">math</span><span class="o">.</span><span class="n">factorial</span> <span class="o">=</span> <span class="n">debug</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">factorial</span><span class="p">)</span>
</span><span class="linenos"> 5</span>
<span class="linenos"> 6</span><span class="k">def</span> <span class="nf">approximate_e</span><span class="p">(</span><span class="n">terms</span><span class="o">=</span><span class="mi">18</span><span class="p">):</span>
<span class="linenos"> 7</span>    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="n">math</span><span class="o">.</span><span class="n">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">terms</span><span class="p">))</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Here, you also apply a decorator to a function that has already been defined. In line 4, you decorate <code>factorial()</code> from the <code>math</code> standard library. You can&rsquo;t use the pie syntax, but you can still manually apply the decorator. The approximation of <em>e</em> is based on the following <a href="https://en.wikipedia.org/wiki/E_(mathematical_constant)">series expansion</a>:</p>
<figure class="js-lightbox"><a href="https://files.realpython.com/media/e_series_long.7ce8d6492b4f.png" target="_blank"><img loading="lazy" class="img-fluid mx-auto d-block w-66" src="https://files.realpython.com/media/e_series_long.7ce8d6492b4f.png" width="1935" height="228" srcset="/cdn-cgi/image/width=483,format=auto/https://files.realpython.com/media/e_series_long.7ce8d6492b4f.png 483w, /cdn-cgi/image/width=645,format=auto/https://files.realpython.com/media/e_series_long.7ce8d6492b4f.png 645w, /cdn-cgi/image/width=967,format=auto/https://files.realpython.com/media/e_series_long.7ce8d6492b4f.png 967w, /cdn-cgi/image/width=1935,format=auto/https://files.realpython.com/media/e_series_long.7ce8d6492b4f.png 1935w" sizes="(min-width: 1200px) 690px, (min-width: 780px) calc(-5vw + 669px), (min-width: 580px) 510px, calc(100vw - 30px)" alt="Series for calculating mathematical constant e" data-asset="636"/></a></figure>

<p>When calling the <code>approximate_e()</code> function, you can see the <code>@debug</code> decorator at work:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">calculate_e</span> <span class="kn">import</span> <span class="n">approximate_e</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">approximate_e</span><span class="p">(</span><span class="n">terms</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="go">Calling factorial(0)</span>
<span class="go">factorial() returned 1</span>
<span class="go">Calling factorial(1)</span>
<span class="go">factorial() returned 1</span>
<span class="go">Calling factorial(2)</span>
<span class="go">factorial() returned 2</span>
<span class="go">Calling factorial(3)</span>
<span class="go">factorial() returned 6</span>
<span class="go">Calling factorial(4)</span>
<span class="go">factorial() returned 24</span>
<span class="go">2.708333333333333</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>In this example, you get a decent approximation of the true value <em>e</em> ≈ 2.718281828, adding only five terms.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div></section><section class="section3"><h3 id="slowing-down-code">Slowing Down Code<a class="headerlink" href="#slowing-down-code" title="Permanent link"></a></h3>
<p>In this section, you&rsquo;ll create a decorator that slows down your code. This might not seem very useful. Why would you want to slow down your Python code?</p>
<p>Probably the most common use case is that you want to rate-limit a function that continuously checks whether a resource&mdash;like a web page&mdash;has changed. The <code>@slow_down</code> decorator will sleep one second before it calls the decorated function:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="c1"># ...</span>

<span class="k">def</span> <span class="nf">slow_down</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Sleep 1 second before calling the function&quot;&quot;&quot;</span>
    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper_slow_down</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapper_slow_down</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>In <code>@slow_down</code>, you call <code>time.sleep()</code> to have your code take a pause before calling the decorated function. To see how the <code>@slow_down</code> decorator works, you create a <code>countdown()</code> function. To see the effect of slowing down the code, you should run the example yourself:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">slow_down</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@slow_down</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">from_number</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="n">from_number</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Liftoff!&quot;</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">else</span><span class="p">:</span>
<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="n">from_number</span><span class="p">)</span>
<span class="gp">... </span>        <span class="n">countdown</span><span class="p">(</span><span class="n">from_number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">countdown</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="go">3</span>
<span class="go">2</span>
<span class="go">1</span>
<span class="go">Liftoff!</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>In <code>countdown()</code>, you check if <code>from_number</code> is smaller than one. In that case, you print <em>Liftoff!</em>. If not, then you print the number and keep counting.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> The <code>countdown()</code> function is a <a href="https://realpython.com/python-recursion/">recursive</a> function. In other words, it&rsquo;s a function calling itself. To learn more about recursive functions in Python, see <a href="https://realpython.com/python-thinking-recursively/">Thinking Recursively in Python</a>.</p>
</div>
<p>The <code>@slow_down</code> decorator always sleeps for one second. <a href="#slowing-down-code-revisited">Later</a>, you&rsquo;ll see how to control the rate by passing an argument to the decorator.</p>
</section><section class="section3"><h3 id="registering-plugins">Registering Plugins<a class="headerlink" href="#registering-plugins" title="Permanent link"></a></h3>
<p>Decorators don&rsquo;t have to wrap the function that they&rsquo;re decorating. They can also simply register that a function exists and return it unwrapped. You can use this, for example, to create a lightweight plugin architecture:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="c1"># ...</span>

<span class="n">PLUGINS</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Register a function as a plug-in&quot;&quot;&quot;</span>
    <span class="n">PLUGINS</span><span class="p">[</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="p">]</span> <span class="o">=</span> <span class="n">func</span>
    <span class="k">return</span> <span class="n">func</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The <code>@register</code> decorator only stores a reference to the decorated function in the global <code>PLUGINS</code> dictionary. Note that you don&rsquo;t have to write an inner function or use <code>@functools.wraps</code> in this example because you&rsquo;re returning the original function unmodified.</p>
<p>You can now register functions as follows:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">register</span><span class="p">,</span> <span class="n">PLUGINS</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@register</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">say_hello</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@register</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">be_awesome</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="sa">f</span><span class="s2">&quot;Yo </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">, together we&#39;re the awesomest!&quot;</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Note that the <code>PLUGINS</code> dictionary already contains references to each function object that&rsquo;s registered as a plugin:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">PLUGINS</span>
<span class="go">{&#39;say_hello&#39;: &lt;function say_hello at 0x7f768eae6730&gt;,</span>
<span class="go"> &#39;be_awesome&#39;: &lt;function be_awesome at 0x7f768eae67b8&gt;}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Python applies decorators when you define a function, so <code>say_hello()</code> and <code>be_awesome()</code> are immediately registered. You can then use <code>PLUGINS</code> to call these functions:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">random</span>

<span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">randomly_greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="n">greeter</span><span class="p">,</span> <span class="n">greeter_func</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">PLUGINS</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Using </span><span class="si">{</span><span class="n">greeter</span><span class="si">!r}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">greeter_func</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">randomly_greet</span><span class="p">(</span><span class="s2">&quot;Alice&quot;</span><span class="p">)</span>
<span class="go">Using &#39;say_hello&#39;</span>
<span class="go">&#39;Hello Alice&#39;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The <code>randomly_greet()</code> function randomly chooses one of the registered functions to use. In the f-string, you use the <a href="https://realpython.com/python-f-strings/#using-an-objects-string-representations-in-f-strings"><code>!r</code> flag</a>. This has the same effect as calling <code>repr(greeter)</code>.</p>
<p>The main benefit of this simple plugin architecture is that you don&rsquo;t need to maintain a list of which plugins exist. That list is created when the plugins register themselves. This makes it trivial to add a new plugin: just define the function and decorate it with <code>@register</code>.</p>
<p>If you&rsquo;re familiar with <code>globals()</code> in Python, then you might see some similarities to how the plugin architecture works. With <code>globals()</code>, you get access to all <a href="https://realpython.com/python-use-global-variable-in-function/">global variables</a> in the current scope, including your plugins:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="nb">globals</span><span class="p">()</span>
<span class="go">{..., # Many variables that aren&#39;t not shown here.</span>
<span class="go"> &#39;say_hello&#39;: &lt;function say_hello at 0x7f768eae6730&gt;,</span>
<span class="go"> &#39;be_awesome&#39;: &lt;function be_awesome at 0x7f768eae67b8&gt;,</span>
<span class="go"> &#39;randomly_greet&#39;: &lt;function randomly_greet at 0x7f768eae6840&gt;}</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Using the <code>@register</code> decorator, you can create your own curated list of interesting names, effectively hand-picking some functions from <code>globals()</code>.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div></section><section class="section3"><h3 id="authenticating-users">Authenticating Users<a class="headerlink" href="#authenticating-users" title="Permanent link"></a></h3>
<p>The final example before moving on to some fancier decorators is commonly used when working with a web framework. In this example, you&rsquo;ll use <a href="https://realpython.com/tutorials/flask/">Flask</a> to set up a <code>/secret</code> web page that should only be visible to users that are logged in or otherwise authenticated:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">secret_app.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">url_for</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">login_required</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Make sure user is logged in before proceeding&quot;&quot;&quot;</span>
    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper_login_required</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">g</span><span class="o">.</span><span class="n">user</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s2">&quot;login&quot;</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="n">url</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">wrapper_login_required</span>

<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&quot;/secret&quot;</span><span class="p">)</span>
<span class="nd">@login_required</span>
<span class="k">def</span> <span class="nf">secret</span><span class="p">():</span>
    <span class="o">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>While this gives an idea about how to add authentication to your web framework, you should usually not write these types of decorators yourself. For Flask, you can use <a href="https://flask-login.readthedocs.io/en/latest/#flask_login.login_required">the Flask-Login extension</a> instead, which adds more security and functionality.</p>
</section></section><section class="section2"><h2 id="fancy-decorators">Fancy Decorators<a class="headerlink" href="#fancy-decorators" title="Permanent link"></a></h2>
<p>So far, you&rsquo;ve seen how to create simple decorators. You already have a pretty good understanding of what decorators are and how they work. Feel free to take a break from this tutorial to practice everything that you&rsquo;ve learned.</p>
<p>In the second part of this tutorial, you&rsquo;ll explore more advanced features, including how to do the following:</p>
<ul>
<li>Add <strong>decorators to classes</strong></li>
<li>Add <strong>several decorators</strong> to one function</li>
<li>Create decorators with <strong>arguments</strong></li>
<li>Create decorators that can <strong>optionally</strong> take arguments</li>
<li>Define <strong>stateful</strong> decorators</li>
<li><strong>Define classes</strong> that act as decorators</li>
</ul>
<p>Ready to dive in? Here you go!</p>
<section class="section3"><h3 id="decorating-classes">Decorating Classes<a class="headerlink" href="#decorating-classes" title="Permanent link"></a></h3>
<p>There are two different ways that you can use decorators on classes. The first one is very close to what you&rsquo;ve already done with functions: you can <em>decorate the methods of a class</em>. This was <a href="https://www.python.org/dev/peps/pep-0318/#motivation">one of the motivations</a> for introducing decorators back in the day.</p>
<p>Some commonly used decorators are even built-ins in Python, including <a href="https://realpython.com/instance-class-and-static-methods-demystified/"><code>@classmethod</code>, <code>@staticmethod</code></a>, and <a href="https://realpython.com/python-property/"><code>@property</code></a>. The <code>@classmethod</code> and <code>@staticmethod</code> decorators are used to define methods inside a class <a href="https://realpython.com/python-namespaces-scope/">namespace</a> that aren&rsquo;t connected to a particular instance of that class. The <code>@property</code> decorator is used to customize <a href="https://realpython.com/python-getter-setter/">getters and setters</a> for <a href="https://realpython.com/python-classes/#class-attributes">class attributes</a>. Expand the box below for an example using these decorators:</p>
<div class="card mb-3" id="collapse_cardc6c27e">
<div class="card-header border-0">
<p class="m-0">
    <button class="btn w-100" data-toggle="collapse" data-target="#collapsec6c27e" aria-expanded="false" aria-controls="collapsec6c27e" markdown="1"><span class="float-left" markdown="1">Example using built-in class decorators</span><span class="float-right text-muted">Show/Hide</span></button>
  </p>
</div>
<div class="collapse js-collapsible-section" data-parent="#collapse_cardc6c27e" id="collapsec6c27e">
<div class="card-body">
<p>The following definition of a <code>Circle</code> class uses the <code>@classmethod</code>, <code>@staticmethod</code>, and <code>@property</code> decorators:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">circle.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">class</span> <span class="nc">Circle</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="n">radius</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">radius</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Get value of radius&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_radius</span>

    <span class="nd">@radius</span><span class="o">.</span><span class="n">setter</span>
    <span class="k">def</span> <span class="nf">radius</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Set radius, raise error if negative&quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="n">value</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_radius</span> <span class="o">=</span> <span class="n">value</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&quot;radius must be non-negative&quot;</span><span class="p">)</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">area</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Calculate area inside circle&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">pi</span><span class="p">()</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">radius</span><span class="o">**</span><span class="mi">2</span>

    <span class="k">def</span> <span class="nf">cylinder_volume</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Calculate volume of cylinder with circle as base&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">area</span> <span class="o">*</span> <span class="n">height</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">unit_circle</span><span class="p">(</span><span class="bp">cls</span><span class="p">):</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Factory method creating a circle with radius 1&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">cls</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">pi</span><span class="p">():</span>
<span class="w">        </span><span class="sd">&quot;&quot;&quot;Value of π, could use math.pi instead though&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="mf">3.1415926535</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Inside <code>Circle</code> you can see several different kinds of methods. Decorators are used to distinguish them:</p>
<ul>
<li><code>.cylinder_volume()</code> is a regular method.</li>
<li><code>.radius</code> is a <strong>mutable property</strong>. It can be set to a different value. However, by defining a setter method, you do some error testing to make sure <code>.radius</code> isn&rsquo;t set to a nonsensical negative number. Properties are accessed as attributes without parentheses.</li>
<li><code>.area</code> is an <strong>immutable property</strong>. Properties without <code>.setter()</code> methods can&rsquo;t be changed. Even though it&rsquo;s defined as a method, it can be retrieved as an attribute without parentheses.</li>
<li><code>.unit_circle()</code> is a class method. It&rsquo;s not bound to one particular instance of <code>Circle</code>. Class methods are often used as factory methods that can create specific instances of the class.</li>
<li><code>.pi()</code> is a static method. It&rsquo;s not really dependent on the <code>Circle</code> class, except that it&rsquo;s part of its namespace. You can call static methods on either an instance or the class.</li>
</ul>
<p>You can use <code>Circle</code> as follows:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">circle</span> <span class="kn">import</span> <span class="n">Circle</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span> <span class="o">=</span> <span class="n">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">radius</span>
<span class="go">5</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">area</span>
<span class="go">78.5398163375</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="mi">2</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">area</span>
<span class="go">12.566370614</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">area</span> <span class="o">=</span> <span class="mi">100</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">    </span><span class="o">...</span>
<span class="gr">AttributeError</span>: <span class="n">can&#39;t set attribute</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">cylinder_volume</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="go">50.265482456</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="w">    </span><span class="o">...</span>
<span class="gr">ValueError</span>: <span class="n">radius must be non-negative</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span> <span class="o">=</span> <span class="n">Circle</span><span class="o">.</span><span class="n">unit_circle</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">radius</span>
<span class="go">1</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">pi</span><span class="p">()</span>
<span class="go">3.1415926535</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">Circle</span><span class="o">.</span><span class="n">pi</span><span class="p">()</span>
<span class="go">3.1415926535</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>In these examples, you explore the different methods, attributes, and properties of <code>Circle</code>.</p>
</div>
</div>
</div>
<p>Next, define a class where you decorate some of its methods using the <a href="#debugging-code"><code>@debug</code></a> and <a href="#timing-functions"><code>@timer</code></a> decorators from <a href="#a-few-real-world-examples">earlier</a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">class_decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">debug</span><span class="p">,</span> <span class="n">timer</span>

<span class="k">class</span> <span class="nc">TimeWaster</span><span class="p">:</span>
<span class="hll">    <span class="nd">@debug</span>
</span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_num</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">max_num</span> <span class="o">=</span> <span class="n">max_num</span>

<span class="hll">    <span class="nd">@timer</span>
</span>    <span class="k">def</span> <span class="nf">waste_time</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num_times</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
            <span class="nb">sum</span><span class="p">([</span><span class="n">number</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">max_num</span><span class="p">)])</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Using this class, you can see the effect of the decorators:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">class_decorators</span> <span class="kn">import</span> <span class="n">TimeWaster</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">tw</span> <span class="o">=</span> <span class="n">TimeWaster</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
<span class="go">Calling __init__(&lt;time_waster.TimeWaster object at 0x7efccce03908&gt;, 1000)</span>
<span class="go">__init__() returned None</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">tw</span><span class="o">.</span><span class="n">waste_time</span><span class="p">(</span><span class="mi">999</span><span class="p">)</span>
<span class="go">Finished waste_time() in 0.3376 secs</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>When you create a new instance of <code>TimeWaster</code>, Python calls <code>.__init__()</code> under the hood, as your use of <code>@debug</code> reveals. The <code>@timer</code> decorator helps you monitor how much time is spent on <code>.waste_time()</code>.</p>
<p>The other way to use decorators on classes is to <em>decorate the whole class</em>. This is, for example, done in the <a href="https://realpython.com/python-data-classes/"><code>dataclasses</code> module</a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>

<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="nd">@dataclass</span>
</span><span class="gp">... </span><span class="k">class</span> <span class="nc">PlayingCard</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">rank</span><span class="p">:</span> <span class="nb">str</span>
<span class="gp">... </span>    <span class="n">suit</span><span class="p">:</span> <span class="nb">str</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The meaning of the syntax is similar to the function decorators. In the example above, you could&rsquo;ve decorated the class by writing <code>PlayingCard = dataclass(PlayingCard)</code>.</p>
<p>A <a href="https://www.python.org/dev/peps/pep-3129/#rationale">common use of class decorators</a> is to be a simpler alternative to some use cases of <a href="https://realpython.com/python-metaclasses/">metaclasses</a>. In both cases, you&rsquo;re changing the definition of a class dynamically.</p>
<p>Writing a class decorator is very similar to writing a function decorator. The only difference is that the decorator will receive a class and not a function as an argument. In fact, all the decorators that <a href="#a-few-real-world-examples">you saw above</a> will work as class decorators. When you&rsquo;re using them on a class instead of a function, their effect might not be what you want. In the following example, the <code>@timer</code> decorator is applied to a class:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">class_decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">timer</span>

<span class="hll"><span class="nd">@timer</span>
</span><span class="k">class</span> <span class="nc">TimeWaster</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_num</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">max_num</span> <span class="o">=</span> <span class="n">max_num</span>

    <span class="k">def</span> <span class="nf">waste_time</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num_times</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
            <span class="nb">sum</span><span class="p">([</span><span class="n">i</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">max_num</span><span class="p">)])</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Decorating a class doesn&rsquo;t decorate its methods. Recall that <code>@timer</code> is just shorthand for <code>TimeWaster = timer(TimeWaster)</code>. Here, <code>@timer</code> only measures the time that it takes to instantiate the class:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">class_decorators</span> <span class="kn">import</span> <span class="n">TimeWaster</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">tw</span> <span class="o">=</span> <span class="n">TimeWaster</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
<span class="go">Finished TimeWaster() in 0.0000 secs</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">tw</span><span class="o">.</span><span class="n">waste_time</span><span class="p">(</span><span class="mi">999</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The output from <code>@timer</code> is only shown as <code>tw</code> is created. The call to <code>.waste_time()</code> isn&rsquo;t timed.</p>
<p><a href="#creating-singletons">Later</a>, you&rsquo;ll see an example defining a proper class decorator, namely <code>@singleton</code>, which ensures that there&rsquo;s only one instance of a class.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div></section><section class="section3"><h3 id="nesting-decorators">Nesting Decorators<a class="headerlink" href="#nesting-decorators" title="Permanent link"></a></h3>
<p>You can <em>apply several decorators</em> to a function at once by stacking them on top of each other:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">debug</span><span class="p">,</span> <span class="n">do_twice</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@debug</span>
<span class="gp">... </span><span class="nd">@do_twice</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Think about this as the decorators being executed in the order they&rsquo;re listed. In other words, <code>@debug</code> calls <code>@do_twice</code>, which calls <code>greet()</code>, or <code>debug(do_twice(greet()))</code>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s2">&quot;Yadi&quot;</span><span class="p">)</span>
<span class="go">Calling greet(&#39;Yadi&#39;)</span>
<span class="go">Hello Yadi</span>
<span class="go">Hello Yadi</span>
<span class="go">greet() returned None</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The greeting is printed twice because of <code>@do_twice</code>. However, the output from <code>@debug</code> is only shown once, since it&rsquo;s called before the <code>@do_twice</code> decorator. Observe the difference if you change the order of <code>@debug</code> and <code>@do_twice</code>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">debug</span><span class="p">,</span> <span class="n">do_twice</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@do_twice</span>
<span class="gp">... </span><span class="nd">@debug</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s2">&quot;Yadi&quot;</span><span class="p">)</span>
<span class="go">Calling greet(&#39;Yadi&#39;)</span>
<span class="go">Hello Yadi</span>
<span class="go">greet() returned None</span>
<span class="go">Calling greet(&#39;Yadi&#39;)</span>
<span class="go">Hello Yadi</span>
<span class="go">greet() returned None</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Here, <code>@do_twice</code> is applied to <code>@debug</code> as well. You can see that both calls to <code>greet()</code> are annotated with debugging information.</p>
</section><section class="section3"><h3 id="defining-decorators-with-arguments">Defining Decorators With Arguments<a class="headerlink" href="#defining-decorators-with-arguments" title="Permanent link"></a></h3>
<p>Sometimes, it&rsquo;s useful to <em>pass arguments to your decorators</em>. For instance, <code>@do_twice</code> could be extended to a <code>@repeat(num_times)</code> decorator. The number of times to execute the decorated function could then be given as an argument.</p>
<p>If you define <code>@repeat</code>, you could do something like this:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">repeat</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@repeat</span><span class="p">(</span><span class="n">num_times</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s2">&quot;World&quot;</span><span class="p">)</span>
<span class="go">Hello World</span>
<span class="go">Hello World</span>
<span class="go">Hello World</span>
<span class="go">Hello World</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Think about how you&rsquo;d implement <code>@repeat</code>.</p>
<p>So far, the name written after the <code>@</code> has referred to a function object that can be called with another function. To be consistent, you then need <code>repeat(num_times=4)</code> to return a function object that can act as a decorator. Luckily, you <a href="#functions-as-return-values">already know how to return functions</a>! In general, you want something like the following:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">repeat</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">decorator_repeat</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="o">...</span>  <span class="c1"># Create and return a wrapper function</span>
    <span class="k">return</span> <span class="n">decorator_repeat</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Typically, the decorator creates and returns an inner wrapper function, so writing the example out in full will give you an inner function within an inner function. While this might sound like the programming equivalent of the <a href="https://en.wikipedia.org/wiki/Inception"><em>Inception</em></a>, you&rsquo;ll untangle it all in a moment:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>

<span class="c1"># ...</span>

<span class="k">def</span> <span class="nf">repeat</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">decorator_repeat</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">wrapper_repeat</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">value</span>
        <span class="k">return</span> <span class="n">wrapper_repeat</span>
    <span class="k">return</span> <span class="n">decorator_repeat</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>It looks a little messy, but you&rsquo;ve only put the same decorator pattern that you&rsquo;ve seen many times by now inside one additional <code>def</code> that handles the arguments to the decorator. First, consider the innermost function:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">wrapper_repeat</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">value</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>This <code>wrapper_repeat()</code> function takes arbitrary arguments and returns the value of the decorated function, <code>func()</code>. This wrapper function also contains the loop that calls the decorated function <code>num_times</code> times. This is no different from the earlier wrapper functions that you&rsquo;ve seen, except that it&rsquo;s using the <code>num_times</code> parameter that must be supplied from the outside.</p>
<p>One step out, you&rsquo;ll find the decorator function:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">decorator_repeat</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper_repeat</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="o">...</span>
    <span class="k">return</span> <span class="n">wrapper_repeat</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Again, <code>decorator_repeat()</code> looks exactly like the decorator functions that you&rsquo;ve written earlier, except that it&rsquo;s named differently. That&rsquo;s because you reserve the base name&mdash;<code>repeat()</code>&mdash;for the outermost function, which is the one the user will call.</p>
<p>As you&rsquo;ve already seen, the outermost function returns a reference to the decorator function:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">def</span> <span class="nf">repeat</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">decorator_repeat</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="o">...</span>
    <span class="k">return</span> <span class="n">decorator_repeat</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>There are a few subtle things happening in the <code>repeat()</code> function:</p>
<ul>
<li>Defining <code>decorator_repeat()</code> as an inner function means that <code>repeat()</code> will refer to a function object, <code>decorator_repeat</code>. Earlier, you used decorators like <code>@do_twice</code> without parentheses. Now, you need to add parentheses when setting up the decorator, as in <code>@repeat()</code>. This is necessary in order to add arguments.</li>
<li>The <code>num_times</code> argument is seemingly not used in <code>repeat()</code> itself. But by passing <code>num_times</code>, a <a href="https://realpython.com/inner-functions-what-are-they-good-for/">closure</a> is created where the value of <code>num_times</code> is stored until <code>wrapper_repeat()</code> uses it later.</li>
</ul>
<p>With everything set up, test your code to see if the results are as expected:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">repeat</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@repeat</span><span class="p">(</span><span class="n">num_times</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s2">&quot;World&quot;</span><span class="p">)</span>
<span class="go">Hello World</span>
<span class="go">Hello World</span>
<span class="go">Hello World</span>
<span class="go">Hello World</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>That&rsquo;s just the result that you were aiming for.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div></section><section class="section3"><h3 id="creating-decorators-with-optional-arguments">Creating Decorators With Optional Arguments<a class="headerlink" href="#creating-decorators-with-optional-arguments" title="Permanent link"></a></h3>
<p>With a little bit of care, you can also define <em>decorators that can be used both with and without arguments</em>. Most likely, you don&rsquo;t need this, but it is nice to have the flexibility. Like <a href="https://en.wikipedia.org/wiki/Winnie-the-Pooh"><em>Winnie-the-Pooh</em></a> says:</p>
<blockquote>
<p>Both&mdash;but don&rsquo;t bother about the bread, please. (<a href="https://www.gutenberg.org/ebooks/67098">Source</a>)</p>
</blockquote>
<p>As you saw in the previous section, when a decorator uses arguments, you need to add an extra outer function. The challenge now is for your code to figure out if you&rsquo;ve called the decorator with or without arguments.</p>
<p>Since the function to decorate is only passed in directly if the decorator is called without arguments, the function must be an optional argument. This means that the decorator arguments must all be specified by keyword. You can enforce this with the special asterisk (<code>*</code>) syntax, which means that <a href="https://realpython.com/python-asterisk-and-slash-special-parameters/">all the following parameters are keyword-only</a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="n">_func</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">key1</span><span class="o">=</span><span class="n">value1</span><span class="p">,</span> <span class="n">key2</span><span class="o">=</span><span class="n">value2</span><span class="p">,</span> <span class="o">...</span><span class="p">):</span>
<span class="linenos"> 2</span>    <span class="k">def</span> <span class="nf">decorator_name</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="linenos"> 3</span>        <span class="o">...</span>  <span class="c1"># Create and return a wrapper function.</span>
<span class="linenos"> 4</span>
<span class="linenos"> 5</span>    <span class="k">if</span> <span class="n">_func</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
<span class="linenos"> 6</span>        <span class="k">return</span> <span class="n">decorator_name</span>
<span class="linenos"> 7</span>    <span class="k">else</span><span class="p">:</span>
<span class="linenos"> 8</span>        <span class="k">return</span> <span class="n">decorator_name</span><span class="p">(</span><span class="n">_func</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Here, the <code>_func</code> argument acts as a marker, noting whether the decorator has been called with arguments or not:</p>
<ul>
<li><strong>Line 1:</strong> If you&rsquo;ve called <code>@name</code> without arguments, then the decorated function will be passed in as <code>_func</code>. If you&rsquo;ve called it with arguments, then <code>_func</code> will be <code>None</code>, and some of the keyword arguments may have been changed from their default values. The asterisk in the argument list means that you can&rsquo;t call the remaining arguments as positional arguments.</li>
<li><strong>Line 6:</strong> In this case, you called the decorator with arguments. Return a decorator function that takes a function as an argument and returns a wrapper function.</li>
<li><strong>Line 8:</strong> In this case, you called the decorator without arguments. Apply the decorator to the function immediately.</li>
</ul>
<p>Using this boilerplate on the <code>@repeat</code> decorator in the previous section, you can write the following:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>

<span class="c1"># ...</span>

<span class="hll"><span class="k">def</span> <span class="nf">repeat</span><span class="p">(</span><span class="n">_func</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">num_times</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
</span>    <span class="k">def</span> <span class="nf">decorator_repeat</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">wrapper_repeat</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_times</span><span class="p">):</span>
                <span class="n">value</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">value</span>
        <span class="k">return</span> <span class="n">wrapper_repeat</span>

<span class="hll">    <span class="k">if</span> <span class="n">_func</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span><span class="hll">        <span class="k">return</span> <span class="n">decorator_repeat</span>
</span><span class="hll">    <span class="k">else</span><span class="p">:</span>
</span><span class="hll">        <span class="k">return</span> <span class="n">decorator_repeat</span><span class="p">(</span><span class="n">_func</span><span class="p">)</span>
</span></code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Compare this with the original <code>@repeat</code>. The only changes are the added <code>_func</code> parameter and the <code>if</code>&hellip;<code>else</code> block at the end.</p>
<p><a href="https://github.com/dabeaz/python-cookbook/blob/master/src/9/defining_a_decorator_that_takes_an_optional_argument/example.py">Recipe 9.6</a> of the excellent <a href="https://realpython.com/asins/1449340377/"><em>Python Cookbook</em></a> shows an alternative solution using <a href="https://docs.python.org/library/functools.html#functools.partial"><code>functools.partial()</code></a>.</p>
<p>You can now apply <code>@repeat</code> to different functions to test that you can now use it with or without arguments:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">repeat</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@repeat</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">say_whee</span><span class="p">():</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Whee!&quot;</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@repeat</span><span class="p">(</span><span class="n">num_times</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Hello </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Recall that the default value of <code>num_times</code> is <code>2</code>, so using <code>@repeat</code> without any arguments is equivalent to using <code>@do_twice</code>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="p">()</span>
<span class="go">Whee!</span>
<span class="go">Whee!</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s2">&quot;Penny&quot;</span><span class="p">)</span>
<span class="go">Hello Penny</span>
<span class="go">Hello Penny</span>
<span class="go">Hello Penny</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Here, <em>Whee!</em> is repeated twice since that&rsquo;s the default behavior of <code>@repeat</code>. As specified by the argument, the greeting is repeated three times.</p>
</section><section class="section3"><h3 id="tracking-state-in-decorators">Tracking State in Decorators<a class="headerlink" href="#tracking-state-in-decorators" title="Permanent link"></a></h3>
<p>Sometimes, it&rsquo;s useful to have <em>a decorator that can keep track of state</em>. As an example, you&rsquo;ll create a decorator that counts the number of times a function is called.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> In <a href="#python-functions">the beginning of this guide</a>, you learned about pure functions returning a value based on given arguments. Stateful decorators are quite the opposite, where the return value will depend on the current state, as well as the given arguments.</p>
</div>
<p>In the <a href="#using-classes-as-decorators">next section</a>, you&rsquo;ll see how to use classes to keep state. But in simple cases, you can also get away with using <a href="https://www.python.org/dev/peps/pep-0232/">function attributes</a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>

<span class="c1"># ...</span>

<span class="k">def</span> <span class="nf">count_calls</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper_count_calls</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">wrapper_count_calls</span><span class="o">.</span><span class="n">num_calls</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Call </span><span class="si">{</span><span class="n">wrapper_count_calls</span><span class="o">.</span><span class="n">num_calls</span><span class="si">}</span><span class="s2"> of </span><span class="si">{</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">()&quot;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="hll">    <span class="n">wrapper_count_calls</span><span class="o">.</span><span class="n">num_calls</span> <span class="o">=</span> <span class="mi">0</span>
</span>    <span class="k">return</span> <span class="n">wrapper_count_calls</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The state&mdash;the number of calls to the function&mdash;is stored in the function attribute <code>.num_calls</code> on the wrapper function. Here&rsquo;s the effect of using it:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">count_calls</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@count_calls</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">say_whee</span><span class="p">():</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Whee!&quot;</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="p">()</span>
<span class="go">Call 1 of say_whee()</span>
<span class="go">Whee!</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="p">()</span>
<span class="go">Call 2 of say_whee()</span>
<span class="go">Whee!</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="o">.</span><span class="n">num_calls</span>
<span class="go">2</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You apply <code>@count_calls</code> to your old friend, <code>say_whee()</code>. Each time you call the function, you see that the call count increases. You can also manually query the <code>.num_calls</code> attribute.</p>
<div><div class="rounded border border-light" style="display:block;position:relative;"> <div style="display:block;width:100%;padding-top:12.5%;"></div> <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"> </div></div><a class="small text-muted" href="/account/join/" rel="nofollow"> <span aria-hidden="true" class="icon baseline mr-1"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"></use></svg></span>Remove ads</a></div></section><section class="section3"><h3 id="using-classes-as-decorators">Using Classes as Decorators<a class="headerlink" href="#using-classes-as-decorators" title="Permanent link"></a></h3>
<p>The typical way to maintain state in Python is by <a href="https://realpython.com/python-classes/">using classes</a>. In this section, you&rsquo;ll see how to rewrite the <code>@count_calls</code> example from the previous section to <em>use a class as a decorator</em>.</p>
<p>Recall that the decorator syntax <code>@decorator</code> is just a quicker way of saying <code>func = decorator(func)</code>. Therefore, if <code>decorator</code> is a class, it needs to take <code>func</code> as an argument in its <a href="https://realpython.com/python-class-constructor/"><code>.__init__()</code> initializer</a>. Furthermore, the class instance needs to be <a href="https://realpython.com/python-callable-instances/">callable</a> so that it can stand in for the decorated function.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> Up until now, all the decorators that you&rsquo;ve seen have been defined as functions. This is how you most often will create decorators. However, you can use <a href="https://realpython.com/python39-new-features/#more-flexible-decorators">any callable expression</a> as a decorator.</p>
</div>
<p>For a class instance to be callable, you implement the special <a href="https://docs.python.org/3/reference/datamodel.html#emulating-callable-objects"><code>.__call__()</code></a> method:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="k">class</span> <span class="nc">Counter</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
<span class="gp">... </span>        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="n">start</span>
<span class="gp">... </span>    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="gp">... </span>        <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Current count is </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">count</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The <code>.__call__()</code> method is executed each time you try to call an instance of the class:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">counter</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">counter</span><span class="p">()</span>
<span class="go">Current count is 1</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">counter</span><span class="p">()</span>
<span class="go">Current count is 2</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">counter</span><span class="o">.</span><span class="n">count</span>
<span class="go">2</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Each time you call <code>counter()</code>, the state changes as the count increases. Therefore, a typical implementation of a decorator class should implement <code>.__init__()</code> and <code>.__call__()</code>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>

<span class="c1"># ...</span>

<span class="k">class</span> <span class="nc">CountCalls</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
        <span class="n">functools</span><span class="o">.</span><span class="n">update_wrapper</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">func</span> <span class="o">=</span> <span class="n">func</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">num_calls</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">num_calls</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Call </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">num_calls</span><span class="si">}</span><span class="s2"> of </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="o">.</span><span class="vm">__name__</span><span class="si">}</span><span class="s2">()&quot;</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The <code>.__init__()</code> method must store a reference to the function, and it can do any other necessary initialization. The <code>.__call__()</code> method will be called instead of the decorated function. It does essentially the same thing as the <code>wrapper()</code> function in your earlier examples. Note that you need to use the <a href="https://docs.python.org/library/functools.html#functools.update_wrapper"><code>functools.update_wrapper()</code></a> function instead of <code>@functools.wraps</code>.</p>
<p>This <code>@CountCalls</code> decorator works the same as the one in the previous section:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">CountCalls</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@CountCalls</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">say_whee</span><span class="p">():</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Whee!&quot;</span><span class="p">)</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="p">()</span>
<span class="go">Call 1 of say_whee()</span>
<span class="go">Whee!</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="p">()</span>
<span class="go">Call 2 of say_whee()</span>
<span class="go">Whee!</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">say_whee</span><span class="o">.</span><span class="n">num_calls</span>
<span class="go">2</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Each call to <code>say_whee()</code> is counted and noted. In the next section, you&rsquo;ll look at more examples of decorators.</p>
</section></section><section class="section2"><h2 id="more-real-world-examples">More Real-World Examples<a class="headerlink" href="#more-real-world-examples" title="Permanent link"></a></h2>
<p>You&rsquo;ve come a long way now, having figured out how to create all kinds of decorators. You&rsquo;ll wrap it up, putting your newfound knowledge to use by creating a few more examples that might be useful in the real world.</p>
<section class="section3"><h3 id="slowing-down-code-revisited">Slowing Down Code, Revisited<a class="headerlink" href="#slowing-down-code-revisited" title="Permanent link"></a></h3>
<p>As noted earlier, your <a href="#slowing-down-code">previous implementation of <code>@slow_down</code></a> always sleeps for one second. Now you know how to add parameters to decorators, so you can rewrite <code>@slow_down</code> using an optional <code>rate</code> argument that controls how long it sleeps:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="c1"># ...</span>

<span class="k">def</span> <span class="nf">slow_down</span><span class="p">(</span><span class="n">_func</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">rate</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Sleep given amount of seconds before calling the function&quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">decorator_slow_down</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">wrapper_slow_down</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">rate</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">wrapper_slow_down</span>

    <span class="k">if</span> <span class="n">_func</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">decorator_slow_down</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">decorator_slow_down</span><span class="p">(</span><span class="n">_func</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You&rsquo;re using the boilerplate introduced in the <a href="#creating-decorators-with-optional-arguments">Creating Decorators With Optional Arguments</a> section to make <code>@slow_down</code> callable both with and without arguments. The same recursive <code>countdown()</code> function <a href="#slowing-down-code">as earlier</a> now sleeps two seconds between each count:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">slow_down</span>

<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="nd">@slow_down</span><span class="p">(</span><span class="n">rate</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class="gp">... </span><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">from_number</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="n">from_number</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Liftoff!&quot;</span><span class="p">)</span>
<span class="gp">... </span>    <span class="k">else</span><span class="p">:</span>
<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="n">from_number</span><span class="p">)</span>
<span class="gp">... </span>        <span class="n">countdown</span><span class="p">(</span><span class="n">from_number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>As before, you must run the example yourself to see the effect of the decorator:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">countdown</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="go">3</span>
<span class="go">2</span>
<span class="go">1</span>
<span class="go">Liftoff!</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>There&rsquo;ll be a two second pause between each number in the countdown.</p>
</section><section class="section3"><h3 id="creating-singletons">Creating Singletons<a class="headerlink" href="#creating-singletons" title="Permanent link"></a></h3>
<p>A singleton is a class with only one instance. There are several singletons in Python that you use frequently, including <code>None</code>, <code>True</code>, and <code>False</code>. The fact that <code>None</code> is a singleton allows you to compare for <code>None</code> using the <a href="https://realpython.com/python-is-identity-vs-equality/"><code>is</code> keyword</a>, like you did when <a href="#creating-decorators-with-optional-arguments">creating decorators with optional arguments</a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="k">if</span> <span class="n">_func</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">decorator_name</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">decorator_name</span><span class="p">(</span><span class="n">_func</span><span class="p">)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Using <code>is</code> returns <code>True</code> only for objects that are the exact same instance. The following <code>@singleton</code> decorator turns a class into a singleton by storing the first instance of the class as an attribute. Later attempts at creating an instance simply return the stored instance:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>

<span class="c1"># ...</span>

<span class="k">def</span> <span class="nf">singleton</span><span class="p">(</span><span class="bp">cls</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Make a class a Singleton class (only one instance)&quot;&quot;&quot;</span>
    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="bp">cls</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper_singleton</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">wrapper_singleton</span><span class="o">.</span><span class="n">instance</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">wrapper_singleton</span><span class="o">.</span><span class="n">instance</span> <span class="o">=</span> <span class="bp">cls</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">wrapper_singleton</span><span class="o">.</span><span class="n">instance</span>
    <span class="n">wrapper_singleton</span><span class="o">.</span><span class="n">instance</span> <span class="o">=</span> <span class="kc">None</span>
    <span class="k">return</span> <span class="n">wrapper_singleton</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>As you see, this class decorator follows the same template as your function decorators. The only difference is that you&rsquo;re using <code>cls</code> instead of <code>func</code> as the parameter name to indicate that it&rsquo;s meant to be a class decorator.</p>
<p>Check it out in practice:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">singleton</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@singleton</span>
<span class="gp">... </span><span class="k">class</span> <span class="nc">TheOne</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">pass</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">first_one</span> <span class="o">=</span> <span class="n">TheOne</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">another_one</span> <span class="o">=</span> <span class="n">TheOne</span><span class="p">()</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">id</span><span class="p">(</span><span class="n">first_one</span><span class="p">)</span>
<span class="go">140094218762310</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nb">id</span><span class="p">(</span><span class="n">another_one</span><span class="p">)</span>
<span class="go">140094218762310</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">first_one</span> <span class="ow">is</span> <span class="n">another_one</span>
<span class="go">True</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>By comparing object IDs and checking with the <code>is</code> keyword, you confirm that <code>first_one</code> is indeed the exact same instance as <code>another_one</code>.</p>
<div class="alert alert-primary" role="alert">
<p><strong>Note:</strong> Singleton classes aren&rsquo;t really used as often in Python as in other languages. The effect of a singleton is usually better implemented as a global variable inside a module.</p>
</div>
<p>Class decorators are less common than function decorators. You should document these well, so that your users know how to apply them.</p>
</section><section class="section3"><h3 id="caching-return-values">Caching Return Values<a class="headerlink" href="#caching-return-values" title="Permanent link"></a></h3>
<p>Decorators can provide a nice mechanism for <a href="https://en.wikipedia.org/wiki/Cache_%28computing%29">caching</a> and <a href="https://en.wikipedia.org/wiki/Memoization">memoization</a>. As an example, look at a <a href="https://realpython.com/python-thinking-recursively/">recursive</a> definition of the <a href="https://realpython.com/fibonacci-sequence-python/">Fibonacci sequence</a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">count_calls</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@count_calls</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
<span class="gp">... </span>        <span class="k">return</span> <span class="n">num</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">num</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>While this implementation is straightforward, its runtime performance is terrible:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="go">&lt;Lots of output from count_calls&gt;</span>
<span class="go">55</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="o">.</span><span class="n">num_calls</span>
<span class="go">177</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>To calculate the tenth Fibonacci number, you should only need to calculate the preceding Fibonacci numbers, but this implementation somehow needs a whopping 177 calculations. It gets worse quickly: 21,891 calculations are needed for <code>fibonacci(20)</code> and almost 2.7 million calculations for the thirtieth number. This is because the code keeps recalculating Fibonacci numbers that are already known.</p>
<p>The usual solution is to implement Fibonacci numbers using a <a href="https://realpython.com/python-for-loop/"><code>for</code> loop</a> and a lookup table. However, caching the calculations will also do the trick. First add a <code>@cache</code> decorator to your module:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>

<span class="c1"># ...</span>

<span class="k">def</span> <span class="nf">cache</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Keep a cache of previous function calls&quot;&quot;&quot;</span>
    <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper_cache</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">cache_key</span> <span class="o">=</span> <span class="n">args</span> <span class="o">+</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">kwargs</span><span class="o">.</span><span class="n">items</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">cache_key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">wrapper_cache</span><span class="o">.</span><span class="n">cache</span><span class="p">:</span>
            <span class="n">wrapper_cache</span><span class="o">.</span><span class="n">cache</span><span class="p">[</span><span class="n">cache_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">wrapper_cache</span><span class="o">.</span><span class="n">cache</span><span class="p">[</span><span class="n">cache_key</span><span class="p">]</span>
    <span class="n">wrapper_cache</span><span class="o">.</span><span class="n">cache</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">return</span> <span class="n">wrapper_cache</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The cache works as a lookup table, as it stores calculations in a dictionary. You can add it to <code>fibonacci()</code>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">cache</span><span class="p">,</span> <span class="n">count_calls</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@cache</span>
<span class="gp">... </span><span class="nd">@count_calls</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
<span class="gp">... </span>        <span class="k">return</span> <span class="n">num</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">num</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You still use <code>@count_calls</code> to monitor the performance of your calculations. With the cache, <code>fibonacci()</code> only does the necessary calculations once:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="go">Call 1 of fibonacci()</span>
<span class="go">...</span>
<span class="go">Call 11 of fibonacci()</span>
<span class="go">55</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="go">21</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Note that in the call to <code>fibonacci(8)</code>, no new calculations were needed since the eighth Fibonacci number had already been calculated for <code>fibonacci(10)</code>.</p>
<p>In the standard library, a <a href="https://realpython.com/lru-cache-python/">Least Recently Used (LRU) cache</a> is available as <a href="https://docs.python.org/library/functools.html#functools.lru_cache"><code>@functools.lru_cache</code></a>. Additionally, you can use a regular cache with <a href="https://docs.python.org/3/library/functools.html#functools.cache"><code>@functools.cache</code></a>.</p>
<p>These decorators have more features than the one you saw above. You should use <code>@functools.lru_cache</code> or <code>@functools.cache</code> instead of writing your own cache decorator.</p>
<p>In the next example, you don&rsquo;t return the result immediately. Instead, you add a call to <code>print()</code> to see when a result is calculated and not just retrieved from the cache:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">functools</span>

<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="nd">@functools</span><span class="o">.</span><span class="n">lru_cache</span><span class="p">(</span><span class="n">maxsize</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span><span class="gp">... </span><span class="k">def</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
<span class="gp">... </span>        <span class="n">value</span> <span class="o">=</span> <span class="n">num</span>
<span class="gp">... </span>    <span class="k">else</span><span class="p">:</span>
<span class="gp">... </span>        <span class="n">value</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="p">(</span><span class="n">num</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
<span class="hll"><span class="gp">... </span>    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Calculated fibonacci(</span><span class="si">{</span><span class="n">num</span><span class="si">}</span><span class="s2">) = </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="gp">... </span>    <span class="k">return</span> <span class="n">value</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The <code>maxsize</code> parameter specifies how many recent calls are cached. The default value is 128, but you can specify <code>maxsize=None</code> to cache all function calls. Using <code>@functools.cache</code> has the same effect as <code>maxsize=None</code>. However, be aware that this can cause memory problems if you&rsquo;re caching many large objects.</p>
<p>You can use the <code>.cache_info()</code> method to see how the cache performs, and you can tune it if needed. In your example, you used an artificially small <code>maxsize</code> to see the effect of elements being removed from the cache:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="go">Calculated fibonacci(1) = 1</span>
<span class="go">Calculated fibonacci(0) = 0</span>
<span class="go">Calculated fibonacci(2) = 1</span>
<span class="go">Calculated fibonacci(3) = 2</span>
<span class="go">Calculated fibonacci(4) = 3</span>
<span class="go">Calculated fibonacci(5) = 5</span>
<span class="go">Calculated fibonacci(6) = 8</span>
<span class="go">Calculated fibonacci(7) = 13</span>
<span class="go">Calculated fibonacci(8) = 21</span>
<span class="go">Calculated fibonacci(9) = 34</span>
<span class="go">Calculated fibonacci(10) = 55</span>
<span class="go">55</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="go">21</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="go">Calculated fibonacci(1) = 1</span>
<span class="go">Calculated fibonacci(0) = 0</span>
<span class="go">Calculated fibonacci(2) = 1</span>
<span class="go">Calculated fibonacci(3) = 2</span>
<span class="go">Calculated fibonacci(4) = 3</span>
<span class="go">Calculated fibonacci(5) = 5</span>
<span class="go">5</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="go">Calculated fibonacci(6) = 8</span>
<span class="go">Calculated fibonacci(7) = 13</span>
<span class="go">Calculated fibonacci(8) = 21</span>
<span class="go">21</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="go">5</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">fibonacci</span><span class="o">.</span><span class="n">cache_info</span><span class="p">()</span>
<span class="go">CacheInfo(hits=17, misses=20, maxsize=4, currsize=4)</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>In these examples, you calculate a few Fibonacci numbers. Your cache only holds four calculations at a time. For example, after calculating <code>fibonacci(10)</code>, it holds the seventh, eight, ninth, and tenth number.</p>
<p>Therefore, you&rsquo;re able to find <code>fibonacci(8)</code> without doing any recalculations. Then you ask for <code>fibonacci(5)</code>, but that fifth number has been deleted from the cache. It therefore needs to be calculated from scratch.</p>
<p>In most applications, you don&rsquo;t need to constrain your cache and can use <code>@functools.cache</code> directly.</p>
</section><section class="section3"><h3 id="adding-information-about-units">Adding Information About Units<a class="headerlink" href="#adding-information-about-units" title="Permanent link"></a></h3>
<p>The following example is somewhat similar to the <a href="#registering-plugins">registering plugins</a> example from earlier, in that it doesn&rsquo;t really change the behavior of the decorated function. Instead, it simply adds <code>unit</code> as a function attribute:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="c1"># ...</span>

<span class="k">def</span> <span class="nf">set_unit</span><span class="p">(</span><span class="n">unit</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Register a unit on a function&quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">decorator_set_unit</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="n">func</span><span class="o">.</span><span class="n">unit</span> <span class="o">=</span> <span class="n">unit</span>
        <span class="k">return</span> <span class="n">func</span>
    <span class="k">return</span> <span class="n">decorator_set_unit</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>The following example calculates the volume of a cylinder based on its radius and height in centimeters:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">math</span>
<span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">set_unit</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@set_unit</span><span class="p">(</span><span class="s2">&quot;cm^3&quot;</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">volume</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">radius</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">height</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You&rsquo;ve added information to <code>volume()</code> that the result should be interpreted as cubic centimeters. You can later access the <code>.unit</code> function attribute when needed:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="n">volume</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="go">141.3716694115407</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">volume</span><span class="o">.</span><span class="n">unit</span>
<span class="go">&#39;cm^3&#39;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Note that you could&rsquo;ve achieved something similar using <a href="https://www.python.org/dev/peps/pep-3107/">function annotations</a>:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">math</span>

<span class="hll"><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">volume</span><span class="p">(</span><span class="n">radius</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s2">&quot;cm^3&quot;</span><span class="p">:</span>
</span><span class="gp">... </span>    <span class="k">return</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">radius</span><span class="o">**</span><span class="mi">2</span> <span class="o">*</span> <span class="n">height</span>
<span class="gp">...</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>However, since annotations are <a href="https://www.python.org/dev/peps/pep-0484/">used for type hints</a>, it&rsquo;s a bit clunky to combine such units as <a href="https://realpython.com/python39-new-features/#annotated-type-hints">annotations</a> with <a href="https://realpython.com/python-type-checking/#static-type-checking">static type checking</a>.</p>
<p>Units become even more powerful and fun when connected with a library that can convert between units. One such library is <a href="http://pint.readthedocs.io/"><code>pint</code></a>. With <code>pint</code> installed (<a href="https://pypi.org/project/Pint/"><code>python -m pip install Pint</code></a>), you can convert the volume to cubic inches or gallons, for example:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">pint</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">ureg</span> <span class="o">=</span> <span class="n">pint</span><span class="o">.</span><span class="n">UnitRegistry</span><span class="p">()</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">vol</span> <span class="o">=</span> <span class="n">volume</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">*</span> <span class="n">ureg</span><span class="p">(</span><span class="n">volume</span><span class="o">.</span><span class="n">unit</span><span class="p">)</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">vol</span>
<span class="go">&lt;Quantity(141.3716694115407, &#39;centimeter ** 3&#39;)&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">vol</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s2">&quot;cubic inches&quot;</span><span class="p">)</span>
<span class="go">&lt;Quantity(8.627028576414954, &#39;inch ** 3&#39;)&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">vol</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s2">&quot;gallons&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">m</span>  <span class="c1"># Magnitude</span>
<span class="go">0.0373464440537444</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You use <code>pint</code> to create a quantity that has both a magnitude and a unit. By calling <code>.to()</code>, you convert to other units. For example, the example cylinder is about 141 cubic centimeters, which translates to approximately 8.63 cubic inches and 0.0373 gallons.</p>
<p>You could also modify the decorator to return a <code>pint</code> <a href="https://pint.readthedocs.io/en/latest/getting/tutorial.html"><code>Quantity</code></a> directly. Such a <code>Quantity</code> is made by multiplying a value with the unit. In <code>pint</code>, units must be looked up in a <code>UnitRegistry</code>. You can store the registry as a function attribute on the decorator to avoid cluttering the namespace:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorators.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>
<span class="kn">import</span> <span class="nn">pint</span>

<span class="c1"># ...</span>

<span class="k">def</span> <span class="nf">use_unit</span><span class="p">(</span><span class="n">unit</span><span class="p">):</span>
<span class="w">    </span><span class="sd">&quot;&quot;&quot;Have a function return a Quantity with given unit&quot;&quot;&quot;</span>
    <span class="n">use_unit</span><span class="o">.</span><span class="n">ureg</span> <span class="o">=</span> <span class="n">pint</span><span class="o">.</span><span class="n">UnitRegistry</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">decorator_use_unit</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">wrapper_use_unit</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">value</span> <span class="o">*</span> <span class="n">use_unit</span><span class="o">.</span><span class="n">ureg</span><span class="p">(</span><span class="n">unit</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">wrapper_use_unit</span>
    <span class="k">return</span> <span class="n">decorator_use_unit</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>With the <code>@use_unit</code> decorator, converting units is practically effortless:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="pycon" data-is-repl="true">
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
        <span class="codeblock__output-toggle" title="Toggle prompts and output" role="button"><span class="icon baseline js-codeblock-output-on codeblock__header--icon-lower" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#regular--rectangle-terminal"/></svg></span></span>
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">decorators</span> <span class="kn">import</span> <span class="n">use_unit</span>

<span class="gp">&gt;&gt;&gt; </span><span class="nd">@use_unit</span><span class="p">(</span><span class="s2">&quot;meters per second&quot;</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">average_speed</span><span class="p">(</span><span class="n">distance</span><span class="p">,</span> <span class="n">duration</span><span class="p">):</span>
<span class="gp">... </span>    <span class="k">return</span> <span class="n">distance</span> <span class="o">/</span> <span class="n">duration</span>
<span class="gp">...</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">bolt</span> <span class="o">=</span> <span class="n">average_speed</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mf">9.58</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">bolt</span>
<span class="go">&lt;Quantity(10.438413361169102, &#39;meter / second&#39;)&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">bolt</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s2">&quot;km per hour&quot;</span><span class="p">)</span>
<span class="go">&lt;Quantity(37.578288100208766, &#39;kilometer / hour&#39;)&gt;</span>

<span class="gp">&gt;&gt;&gt; </span><span class="n">bolt</span><span class="o">.</span><span class="n">to</span><span class="p">(</span><span class="s2">&quot;mph&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">m</span>  <span class="c1"># Magnitude</span>
<span class="go">23.350065679064745</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>When <a href="https://en.wikipedia.org/wiki/Usain_Bolt">Usain Bolt</a> ran <a href="https://en.wikipedia.org/wiki/Men%27s_100_metres_world_record_progression">100 meters</a> in 9.58 seconds at the <a href="https://en.wikipedia.org/wiki/2009_World_Championships_in_Athletics">2009 world championships</a>, he had an average speed of 10.4 meters per second. This translates to about 37.6 kilometers per hour and 23.4 miles per hour.</p>
</section><section class="section3"><h3 id="validating-json">Validating JSON<a class="headerlink" href="#validating-json" title="Permanent link"></a></h3>
<p>You&rsquo;ll now look at one last use case. Take a quick look at the following <a href="https://realpython.com/tutorials/flask/">Flask</a> route handler:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&quot;/grade&quot;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;POST&quot;</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">update_grade</span><span class="p">():</span>
    <span class="n">json_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="k">if</span> <span class="s2">&quot;student_id&quot;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">json_data</span><span class="p">:</span>
        <span class="n">abort</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span>
    <span class="c1"># Update database</span>
    <span class="k">return</span> <span class="s2">&quot;success!&quot;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>Here you ensure that the key <code>student_id</code> is part of the request. Although this validation works, it doesn&rsquo;t really belong in the function itself. Additionally, there may be other routes that use the same validation. So, to keep it <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>, you can abstract out any unnecessary logic with a decorator. The following <code>@validate_json</code> decorator will do the job:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorator_flask.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="linenos"> 1</span><span class="kn">import</span> <span class="nn">functools</span>
<span class="linenos"> 2</span><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">abort</span>
<span class="linenos"> 3</span>
<span class="linenos"> 4</span><span class="k">def</span> <span class="nf">validate_json</span><span class="p">(</span><span class="o">*</span><span class="n">expected_args</span><span class="p">):</span>
<span class="linenos"> 5</span>    <span class="k">def</span> <span class="nf">decorator_validate_json</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="linenos"> 6</span>        <span class="nd">@functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
<span class="linenos"> 7</span>        <span class="k">def</span> <span class="nf">wrapper_validate_json</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
<span class="linenos"> 8</span>            <span class="n">json_object</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
<span class="linenos"> 9</span>            <span class="k">for</span> <span class="n">expected_arg</span> <span class="ow">in</span> <span class="n">expected_args</span><span class="p">:</span>
<span class="linenos">10</span>                <span class="k">if</span> <span class="n">expected_arg</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">json_object</span><span class="p">:</span>
<span class="linenos">11</span>                    <span class="n">abort</span><span class="p">(</span><span class="mi">400</span><span class="p">)</span>
<span class="linenos">12</span>            <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="linenos">13</span>        <span class="k">return</span> <span class="n">wrapper_validate_json</span>
<span class="linenos">14</span>    <span class="k">return</span> <span class="n">decorator_validate_json</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>In the above code, the decorator takes a variable-length list as an argument so that you can pass in as many string arguments as necessary, each representing a key used to validate the <a href="https://realpython.com/python-json/">JSON</a> data:</p>
<ul>
<li><strong>Line 4:</strong> The list of keys that must be present in the JSON is given as arguments to the decorator.</li>
<li><strong>Line 9:</strong> The wrapper function validates that each expected key is present in the JSON data.</li>
</ul>
<p>The route handler can then focus on its real job&mdash;updating grades&mdash;as it can safely assume that the JSON data are valid:</p>
<div class="codeblock mb-3 w-100" aria-label="Code block" data-syntax-language="python" >
  <div class="codeblock__header d-flex justify-content-between codeblock--blue">
    <span class="mr-2 noselect" aria-label="Language">Python</span>
    <span class="mr-2" aria-label="Filename"><code style="color: inherit;">decorator_flask.py</code></span>
    <div class="noselect">
      
    </div>
  </div>
  <div style="position: relative;">
    <div class="highlight highlight--with-header"><pre><span></span><code><span class="kn">import</span> <span class="nn">functools</span>
<span class="hll"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">abort</span>
</span>
<span class="hll"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span>
<span class="c1"># ...</span>

<span class="nd">@app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s2">&quot;/grade&quot;</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;POST&quot;</span><span class="p">])</span>
<span class="nd">@validate_json</span><span class="p">(</span><span class="s2">&quot;student_id&quot;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">update_grade</span><span class="p">():</span>
    <span class="n">json_data</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">get_json</span><span class="p">()</span>
    <span class="c1"># Update database.</span>
    <span class="k">return</span> <span class="s2">&quot;success!&quot;</span>
</code></pre></div>
    
    <button class="codeblock__copy btn btn-outline-secondary border m-1 px-1 d-hover-only" title="Copy to clipboard"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span></button>
    <template class="codeblock__copied-template">
      <span class="small"><span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@check"/></svg></span>Copied!</span>
    </template>
    
  </div>
</div>
<p>You apply <code>@validate_json</code>, which simplifies the logic inside <code>update_grade()</code>.</p>
</section></section><section class="section2"><h2 id="conclusion">Conclusion<a class="headerlink" href="#conclusion" title="Permanent link"></a></h2>
<p>This has been quite a journey! You started this tutorial by looking closer at functions, and particularly how you can define them inside other functions and pass them around just like any other Python object. Then you learned about decorators and how to write them such that:</p>
<ul>
<li>They can be reused.</li>
<li>They can decorate functions with arguments and return values.</li>
<li>They can use <code>@functools.wraps</code> to look more like the decorated function.</li>
</ul>
<p>In the second part of the tutorial, you saw more advanced decorators and learned how to:</p>
<ul>
<li>Decorate classes</li>
<li>Nest decorators</li>
<li>Add arguments to decorators</li>
<li>Keep state within decorators</li>
<li>Use classes as decorators</li>
</ul>
<p>You saw that, to define a decorator, you typically define a function returning a wrapper function. The wrapper function uses <code>*args</code> and <code>**kwargs</code> to pass on arguments to the decorated function. If you want your decorator to also take arguments, then you need to nest the wrapper function inside another function. In this case, you usually end up with three <code>return</code> statements.</p>
<p>You can download the code from this tutorial by clicking below:</p>
<div class="alert alert-warning" role="alert">
<p><strong markdown="1">Get Your Code:</strong> <a href="https://realpython.com/bonus/primer-on-python-decorators-code/" class="alert-link" data-toggle="modal" data-target="#modal-primer-on-python-decorators-code" data-focus="false" markdown="1">Click here to download the free sample code</a> that shows you how to create and use Python decorators.</p>
</div>
</section><section class="section2"><h2 id="further-reading">Further Reading<a class="headerlink" href="#further-reading" title="Permanent link"></a></h2>
<p>If you&rsquo;re still looking for more, the book <a href="https://realpython.com/products/python-tricks-book/"><em>Python Tricks</em></a> has a section on decorators, as does the <a href="https://realpython.com/asins/1449340377/"><em>Python Cookbook</em></a> by David Beazley and Brian K. Jones.</p>
<p>For a deep dive into the historical discussion on how decorators should be implemented in Python, see <a href="https://www.python.org/dev/peps/pep-0318/">PEP 318</a> as well as the <a href="https://wiki.python.org/moin/PythonDecorators">Python Decorator Wiki</a>. You can find more examples of decorators in the <a href="https://wiki.python.org/moin/PythonDecoratorLibrary">Python Decorator Library</a>. The <a href="https://github.com/micheles/decorator"><code>decorator</code> module</a> can simplify creating your own decorators, and its <a href="https://github.com/micheles/decorator#documentation">documentation</a> contains further decorator examples.</p>
<div class="alert alert-warning" role="alert">
<p><strong markdown="1">Decorators Cheat Sheet:</strong> <a href="https://realpython.com/bonus/decorators-cheatsheet/" class="alert-link" data-toggle="modal" data-target="#modal-decorators-cheatsheet" data-focus="false" markdown="1">Click here to get access to a free three-page Python decorators cheat sheet</a> that summarizes the techniques explained in this tutorial.</p>
</div>
<div class="container border rounded text-wrap-pretty my-3">

  <p class="my-3"><mark class="marker-highlight"><strong><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@quiz"/></svg></span> Take the Quiz:</strong></mark> Test your knowledge with our interactive “Decorators” quiz. You’ll receive a score upon completion to help you track your learning progress:</p>

  <hr>

  <div class="row my-3">
    <div class="col-xs-12 col-sm-4 col-md-3 align-self-center">

      <a href="/quizzes/decorators/" tabindex="-1">
        <div class="embed-responsive embed-responsive-16by9">

            <img class="card-img-top m-0 p-0 embed-responsive-item rounded" style="object-fit: contain; background: #abe5b2;" alt="Python Decorators" src="https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg" width="1920" height="1080" srcset="/cdn-cgi/image/width=480,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 480w, /cdn-cgi/image/width=640,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 640w, /cdn-cgi/image/width=960,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 960w, /cdn-cgi/image/width=1920,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 1920w" sizes="(min-width: 1200px) 142px, (min-width: 1000px) 122px, (min-width: 780px) 112px, (min-width: 580px) 139px, calc(100vw - 62px)">


          <div class="card-img-overlay d-flex align-items-center">
            <div class="mx-auto">
              <span class="text-light" style="opacity: 0.90;"><span class="icon baseline scale2x" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@quiz"/></svg></span></span>
            </div>
          </div>
        </div>
      </a>

    </div>
    <div class="col">
      <div class="mt-3 d-md-none"></div> 
      <p class="small text-muted mb-0"><strong>Interactive Quiz</strong></p>
      <a href="/quizzes/decorators/" class="stretched-link"><span class="my-0 h4">Decorators</span></a> 
      <p class="text-muted mb-0 small">In this quiz, you&#x27;ll revisit the foundational concepts of what Python decorators are and how to create and use them.</p>
    </div>
  </div>

</div>

</section>

    
      
      <div class="d-flex justify-content-center flex-wrap gap-2 my-3">
        
<div class="jsCompletionStatusWidget btn-group mb-0">
  <button title="Click to mark as completed" class="jsBtnCompletion btn btn-secondary border-right " style="border-top-right-radius: 0; border-bottom-right-radius: 0;" disabled>Mark as Completed</button>
  <button title="Add bookmark" class="jsBtnBookmark btn btn-secondary border-left" disabled><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#light--bookmark"/></svg></span></button>
</div>

        
<div class="btn-group mb-0">
  <a class="btn btn-secondary border-right" style="border-top-right-radius: 0; border-bottom-right-radius: 0;" title="Liked it" role="button" aria-label="Thumbs up (liked it)" href="/feedback/survey/article/primer-on-python-decorators/liked/?from=article-footer" target="_blank"><span class="icon" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#light--thumbs-up"/></svg></span></a> 
  <a class="btn btn-secondary border-left" role="button" aria-label="Thumbs down (disliked it)" title="Disliked it" href="/feedback/survey/article/primer-on-python-decorators/disliked/?from=article-footer" target="_blank"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#light--thumbs-down"/></svg></span></a>
</div>

        













<share-button>
  <button class="btn btn-secondary" type="button" title="Share" aria-label="Share"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@share-light"/></svg></span>Share</button>
  <template>
    
    <div class="d-flex flex-wrap justify-content-center justify-content-md-between flex-column flex-md-row gap-1">
      <a target="_blank" rel="nofollow" href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn share-linkedin" aria-label="Share on LinkedIn"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--linkedin"/></svg></span>LinkedIn</a>

      <a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Interesting%20%23Python%20article%20by%20%40realpython%3A&amp;url=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn share-x-twitter" aria-label="Share on Twitter"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--x-twitter"/></svg></span>Twitter</a>

      <a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn share-facebook" aria-label="Share on Facebook"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--facebook"/></svg></span>Facebook</a>

      

      <a target="_blank" rel="nofollow" href="mailto:?subject=Python%20article%20for%20you&amp;body=Check%20out%20this%20Python%20article%3A%0A%0APrimer%20on%20Python%20Decorators%0A%0Ahttps%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F%0A" class="btn share-email" aria-label="Share on Email"><span class="icon baseline text-light mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--envelope"/></svg></span>Email</a>
    </div>

    <div class="mt-4">
      




<copyable-text>
  <label for="copyable-text-share">Or copy the link:</label>
  <div class="input-group">
    <input id="copyable-text-share" type="text" class="form-control text-truncate" value="https://realpython.com/primer-on-python-decorators/" data-copy-source>
    <div class="input-group-append d-print-none">
      <button type="button" class="btn btn-secondary btn-input-addon" title="Copy to Clipboard" data-copy-trigger>
        <span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#@copy"/></svg></span>Copy
      </button>
    </div>
  </div>
  <template data-copy-success-content>
    <span class="icon baseline mr-1 text-success" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#v4--check"/></svg></span>Copied!
  </template>
</copyable-text>

    </div>

    <div class="text-center mt-4 user-select-none">
      <small><span class="icon baseline text-color-red" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--heart"/></svg></span> Happy Pythoning!</small>
    </div>
  </template>
</share-button>


      </div>
    

    
      
<div class="border rounded p-3 card mb-2 text-wrap-pretty">
  <p class="mb-0"><span class="badge badge-pill badge-success"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#v4--play-circle"/></svg></span> Watch Now</span> This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: <a class="stretched-link text-success" href="/courses/python-decorators-101/"><strong>Python Decorators 101</strong></a></p>
</div>

    
  </div>

  
    

<div class="card mt-4 mb-4 bg-secondary">
  <p class="card-header h3 text-center bg-light">🐍 Python Tricks 💌</p>
  <div class="card-body">
    <div class="container">
      <div class="row">
        <div class="col-xs-12 col-sm-7">
          <p>Get a short &amp; sweet <strong>Python Trick</strong> delivered to your inbox every couple of days. No spam ever. Unsubscribe any time. Curated by the Real Python team.</p>
        </div>
        <div class="col-xs-12 col-sm-5">
          <img loading="lazy" class="img-fluid rounded mb-3" src="/static/pytrick-dict-merge.4201a0125a5e.png" width="738" height="490" alt="Python Tricks Dictionary Merge">
        </div>
      </div>
      <div class="row mb-3">
        <form class="col-12" action="/optins/process/" method="post">
          <input type="hidden" name="csrfmiddlewaretoken" value="jaRCD1qNE7h0Rglie9ArcHoUUSahtVK5zZxzbvs2BBfBkDNgTjpQqVixahX4SG29">
          <input type="hidden" name="slug" value="static-python-tricks-footer">
          <div class="form-group">
            <input name="email" type="email" class="form-control form-control-lg" placeholder="Email Address" required>
          </div>
          <button name="submit" type="submit" class="btn btn-primary btn-lg btn-block">Send Me Python Tricks »</button>
        </form>
      </div>
    </div>
  </div>
</div>


  

  



<div class="card mt-3" id="author">
  <p class="card-header h3">About <strong>Geir Arne Hjelle</strong></p>
  <div class="card-body">
    <div class="container p-0">
      <div class="row">
        <div class="col-12 col-md-3 align-self-center">
          <a href="/team/gahjelle/" aria-hidden="true" tabindex="-1">
            <img loading="lazy" src="/cdn-cgi/image/width=800,height=800,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg" srcset="/cdn-cgi/image/width=200,height=200,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg 200w, /cdn-cgi/image/width=266,height=266,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg 266w, /cdn-cgi/image/width=400,height=400,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg 400w, /cdn-cgi/image/width=800,height=800,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg 800w" sizes="(min-width: 580px) 154px, calc(33.08vw - 24px)" width="800" height="800" style="background: #080a09;" class="d-block d-md-none rounded-circle img-fluid w-33 mb-0 mx-auto" alt="Geir Arne Hjelle">
            <img loading="lazy" src="/cdn-cgi/image/width=800,height=800,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg" srcset="/cdn-cgi/image/width=200,height=200,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg 200w, /cdn-cgi/image/width=266,height=266,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg 266w, /cdn-cgi/image/width=400,height=400,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg 400w, /cdn-cgi/image/width=800,height=800,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg 800w" sizes="(min-width: 1200px) 140px, calc(-1.5vw + 137px)" width="800" height="800" style="background: #080a09;" class="d-none d-md-block rounded-circle img-fluid w-100 mb-0" alt="Geir Arne Hjelle">
          </a>
        </div>
        <div class="col mt-3">
          <p>Geir Arne is an avid Pythonista and a member of the Real Python tutorial team.</p>
          <a href="/team/gahjelle/" class="card-link">» More about Geir Arne</a>
        </div>
      </div>
    </div>
  </div>
  
  <hr class="my-0">
  <div class="card-body pb-0">
    <div class="container">
      <div class="row">
        <p><em>Each tutorial at Real Python is created by a team of developers so that it meets our high quality standards. The team members who worked on this tutorial are:</em></p>
      </div>

      
        
          <div class="row align-items-center w-100 mx-auto">
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/asantos/" aria-hidden="true" tabindex="-1"><img loading="lazy" src="/cdn-cgi/image/width=959,height=959,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/PP.9b8b026f75b8.jpg" srcset="/cdn-cgi/image/width=239,height=239,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/PP.9b8b026f75b8.jpg 239w, /cdn-cgi/image/width=319,height=319,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/PP.9b8b026f75b8.jpg 319w, /cdn-cgi/image/width=479,height=479,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/PP.9b8b026f75b8.jpg 479w, /cdn-cgi/image/width=959,height=959,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/PP.9b8b026f75b8.jpg 959w" sizes="(min-width: 1200px) 73px, (min-width: 780px) calc(-0.75vw + 69px), (min-width: 580px) 43px, calc(33.46vw - 64px)" width="959" height="959" style="background: #dadad8;" class="rounded-circle img-fluid w-100" alt="Aldren Santos"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/asantos/" class="card-link small"><p>Aldren</p></a>
        </div>

        

        
      
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/bsolomon/" aria-hidden="true" tabindex="-1"><img loading="lazy" src="/cdn-cgi/image/width=1188,height=1188,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/Screen_Shot_2021-09-28_at_3.13.21_PM.3310c56e90bd.jpg" srcset="/cdn-cgi/image/width=297,height=297,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/Screen_Shot_2021-09-28_at_3.13.21_PM.3310c56e90bd.jpg 297w, /cdn-cgi/image/width=396,height=396,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/Screen_Shot_2021-09-28_at_3.13.21_PM.3310c56e90bd.jpg 396w, /cdn-cgi/image/width=594,height=594,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/Screen_Shot_2021-09-28_at_3.13.21_PM.3310c56e90bd.jpg 594w, /cdn-cgi/image/width=1188,height=1188,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/Screen_Shot_2021-09-28_at_3.13.21_PM.3310c56e90bd.jpg 1188w" sizes="(min-width: 1200px) 73px, (min-width: 780px) calc(-0.75vw + 69px), (min-width: 580px) 43px, calc(33.46vw - 64px)" width="1188" height="1188" style="background: #485855;" class="rounded-circle img-fluid w-100" alt="Brad Solomon"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/bsolomon/" class="card-link small"><p>Brad</p></a>
        </div>

        

        
      
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/dbader/" aria-hidden="true" tabindex="-1"><img loading="lazy" src="/cdn-cgi/image/width=1000,height=1000,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/daniel-square.d58bf4388750.jpg" srcset="/cdn-cgi/image/width=250,height=250,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/daniel-square.d58bf4388750.jpg 250w, /cdn-cgi/image/width=333,height=333,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/daniel-square.d58bf4388750.jpg 333w, /cdn-cgi/image/width=500,height=500,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/daniel-square.d58bf4388750.jpg 500w, /cdn-cgi/image/width=1000,height=1000,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/daniel-square.d58bf4388750.jpg 1000w" sizes="(min-width: 1200px) 73px, (min-width: 780px) calc(-0.75vw + 69px), (min-width: 580px) 43px, calc(33.46vw - 64px)" width="1000" height="1000" style="background: #dad5cf;" class="rounded-circle img-fluid w-100" alt="Dan Bader"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/dbader/" class="card-link small"><p>Dan</p></a>
        </div>

        

        
          </div>
        
      
        
          <div class="row align-items-center w-100 mx-auto">
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/jjablonski/" aria-hidden="true" tabindex="-1"><img loading="lazy" src="/cdn-cgi/image/width=800,height=800,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg" srcset="/cdn-cgi/image/width=200,height=200,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg 200w, /cdn-cgi/image/width=266,height=266,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg 266w, /cdn-cgi/image/width=400,height=400,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg 400w, /cdn-cgi/image/width=800,height=800,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg 800w" sizes="(min-width: 1200px) 73px, (min-width: 780px) calc(-0.75vw + 69px), (min-width: 580px) 43px, calc(33.46vw - 64px)" width="800" height="800" style="background: #b8b9bb;" class="rounded-circle img-fluid w-100" alt="Joanna Jablonski"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/jjablonski/" class="card-link small"><p>Joanna</p></a>
        </div>

        

        
      
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/kfinegan/" aria-hidden="true" tabindex="-1"><img loading="lazy" src="/cdn-cgi/image/width=400,height=400,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/VZxEtUor_400x400.7169c68e3950.jpg" srcset="/cdn-cgi/image/width=100,height=100,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/VZxEtUor_400x400.7169c68e3950.jpg 100w, /cdn-cgi/image/width=133,height=133,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/VZxEtUor_400x400.7169c68e3950.jpg 133w, /cdn-cgi/image/width=200,height=200,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/VZxEtUor_400x400.7169c68e3950.jpg 200w, /cdn-cgi/image/width=400,height=400,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/VZxEtUor_400x400.7169c68e3950.jpg 400w" sizes="(min-width: 1200px) 73px, (min-width: 780px) calc(-0.75vw + 69px), (min-width: 580px) 43px, calc(33.46vw - 64px)" width="400" height="400" style="background: #d8d3d7;" class="rounded-circle img-fluid w-100" alt="Kate Finegan"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/kfinegan/" class="card-link small"><p>Kate</p></a>
        </div>

        

        
      
        

        <div class="col-4 col-sm-2 align-self-center">
          
            <a href="/team/mherman/" aria-hidden="true" tabindex="-1"><img loading="lazy" src="/cdn-cgi/image/width=160,height=160,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/mike.fa94729a1e81.jpg" srcset="/cdn-cgi/image/width=40,height=40,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/mike.fa94729a1e81.jpg 40w, /cdn-cgi/image/width=53,height=53,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/mike.fa94729a1e81.jpg 53w, /cdn-cgi/image/width=80,height=80,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/mike.fa94729a1e81.jpg 80w, /cdn-cgi/image/width=160,height=160,fit=crop,gravity=auto,format=auto/https://files.realpython.com/media/mike.fa94729a1e81.jpg 160w" sizes="(min-width: 1200px) 73px, (min-width: 780px) calc(-0.75vw + 69px), (min-width: 580px) 43px, calc(33.46vw - 64px)" width="160" height="160" style="background: #35556a;" class="rounded-circle img-fluid w-100" alt="Michael Herman"></a>
          
        </div>
        <div class="col pl-0 d-none d-sm-block">
          <a href="/team/mherman/" class="card-link small"><p>Michael</p></a>
        </div>

        

        
          </div>
        
      
    </div>
  </div>
  

</div>





  
    

<div class="bg-light rounded py-4 my-4 shadow shadow-sm mx-n2">
  
  <div class="col-12 text-center d-block d-md-none">
    <p class="h2 mb-3">Master <u><span class="marker-highlight">Real-World Python Skills</mark></u> With Unlimited Access to Real&nbsp;Python</p>
    <p class="mb-1"><img loading="lazy" class="w-75" src="/static/videos/lesson-locked.f5105cfd26db.svg" width="510" height="260" alt="Locked learning resources"></p>
    <p class="mx-auto w-75 mb-3 small"><strong>Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert&nbsp;Pythonistas:</strong></p>
    <p class="mb-0"><a href="/account/join/?utm_source=rp_article_footer&utm_content=primer-on-python-decorators" class="btn btn-primary btn-sm px-4 mb-0">Level Up Your Python Skills »</a>
  </div>

  
  <div class="col-12 text-center d-none d-md-block">
    <p class="h2 mb-2">Master <u><span class="marker-highlight">Real-World Python Skills</span></u><br>With Unlimited Access to Real&nbsp;Python</p>
    <p class="mb-2"><img loading="lazy" class="w-50 mb-2" src="/static/videos/lesson-locked.f5105cfd26db.svg" width="510" height="260" alt="Locked learning resources"></p>
    <p class="mx-auto w-50 mb-3"><strong>Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas:</strong></p>
    <p><a href="/account/join/?utm_source=rp_article_footer&utm_content=primer-on-python-decorators" class="btn btn-primary btn-lg px-4">Level Up Your Python Skills »</a>
  </div>
</div>

  

  
  <div class="card mt-4" id="reader-comments">
    <p class="card-header h3">What Do You Think?</p>
    
    <div class="text-center mt-3 mb-0 p-0">
      <div class="mb-2">
        <strong class="mr-2">Rate this article:</strong>
        
<div class="btn-group mb-0">
  <a class="btn btn-secondary border-right" style="border-top-right-radius: 0; border-bottom-right-radius: 0;" title="Liked it" role="button" aria-label="Thumbs up (liked it)" href="/feedback/survey/article/primer-on-python-decorators/liked/?from=article-comments" target="_blank"><span class="icon" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#light--thumbs-up"/></svg></span></a> 
  <a class="btn btn-secondary border-left" role="button" aria-label="Thumbs down (disliked it)" title="Disliked it" href="/feedback/survey/article/primer-on-python-decorators/disliked/?from=article-comments" target="_blank"><span class="icon baseline" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#light--thumbs-down"/></svg></span></a>
</div>

      </div>
      



<div class="d-flex justify-content-center flex-wrap gap-2 my-3">
  
  
  <a target="_blank" rel="nofollow" href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn btn-sm share-linkedin" aria-label="Share on LinkedIn"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--linkedin"/></svg></span>LinkedIn</a>
  
  
  <a target="_blank" rel="nofollow" href="https://twitter.com/intent/tweet/?text=Interesting%20Python%20article%20on%20%40realpython%3A%20Primer%20on%20Python%20Decorators&url=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn btn-sm share-x-twitter" aria-label="Share on X/Twitter"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--x-twitter"/></svg></span>Twitter</a>
  
  
  <a target="_blank" rel="nofollow" href="https://facebook.com/sharer/sharer.php?u=https%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F" class="btn btn-sm share-facebook" aria-label="Share on Facebook"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#brands--facebook"/></svg></span>Facebook</a>
  
  
  <a target="_blank" rel="nofollow" href="mailto:?subject=Python%20article%20for%20you&body=Primer%20on%20Python%20Decorators%20on%20Real%20Python%0A%0Ahttps%3A%2F%2Frealpython.com%2Fprimer-on-python-decorators%2F%0A" class="btn btn-sm share-email" aria-label="Share via Email"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--envelope"/></svg></span>Email</a>
  
  
</div>

    </div>
    
    <div class="card-body pt-0 text-wrap-pretty">
      <p>What’s your #1 takeaway or favorite thing you learned? How are you going to put your newfound skills to use? Leave a comment below and let us know.</p>

      <div class="alert alert-dark">
        <p class="mb-0"><strong>Commenting Tips:</strong> The most useful comments are those written with the goal of learning from or helping out other students. <a href="https://realpython.com/python-beginner-tips/#tip-9-ask-good-questions" target="_blank">Get tips for asking good questions</a> and <a href="https://support.realpython.com" target="_blank">get answers to common questions in our support portal</a>.<hr>Looking for a real-time conversation? Visit the <a href="/community/" target="_blank">Real Python Community Chat</a> or join the next <a href="/office-hours/" target="_blank">&ldquo;Office&nbsp;Hours&rdquo; Live Q&A Session</a>. Happy Pythoning!</p>

      </div>

      <div class="mb-4" id="disqus_thread">
      
      </div>
      
    </div>
  </div>

  <div class="card mt-4 mb-4">
    <p class="card-header h3">Keep Learning</p>
    <div class="card-body">
      <p class="mb-0">Related Topics:
      
        
<a href="/tutorials/intermediate/" class="badge badge-light text-muted">intermediate</a>

      
        
<a href="/tutorials/python/" class="badge badge-light text-muted">python</a>

      
      </p>
      
        <p class="mt-3 mb-0">Recommended Video Course: <a class="text-success" href="/courses/python-decorators-101/">Python Decorators 101</a></p>
      
    </div>
  </div>

  
    

<div class="modal fade" tabindex="-1" role="dialog" id="rprw">
  <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
    <div class="modal-content">

      <div class="modal-header border-0">
        <div class="col-12 col-lg-9 mx-auto modal-title text-center my-2">
          <h2 class="my-0">Keep reading Real&nbsp;Python by creating a free account or signing&nbsp;in:</h2>
        </div>
      </div>

      
      <div class="modal-body bg-light">
        <div class="col-12 text-center">

          <div class="col-12 col-lg-8 mx-auto mb-2 mt-3">
            <a href="/account/signup/?intent=continue_reading&utm_source=rp&utm_medium=web&utm_campaign=rwn&utm_content=v1&next=%2Fprimer-on-python-decorators%2F"><img loading="lazy" class="w-100" src="/static/videos/lesson-locked.f5105cfd26db.svg"  width="510" height="260" alt="Keep reading"></a>
          </div>

          <p><a href="/account/signup/?intent=continue_reading&utm_source=rp&utm_medium=web&utm_campaign=rwn&utm_content=v1&next=%2Fprimer-on-python-decorators%2F" class="btn btn-primary btn-lg px-5"></i>Continue »</a></p>

        </div>
      </div>
      

      <div class="modal-footer border-0">
        <p class="text-center text-muted mt-2 mb-1">Already have an account? <a href="/account/login/?next=/primer-on-python-decorators/">Sign-In</a></p>
      </div>

    </div>
  </div>
</div>

    <script src="/static/frontend/reader/rw.bea76ad0e23f.js" async></script>
  


    </div>

  </div>

    </div>

    
    

    
    
      
        
          <div class="modal fade" id="modal-power-of-decorators-fixed" tabindex="-1" aria-labelledby="modal-power-of-decorators-fixed-title" aria-describedby="modal-power-of-decorators-fixed-desc">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">

      <div class="modal-header bg-light pt-3 pb-2">
        <div class="container-fluid">
          <div class="row">
            <div class="col-12">
              <div class="progress" style="height: .5rem;" aria-hidden="true">
                <div class="progress-bar progress-bar-striped progress-bar-animated w-75" role="progressbar"></div>
              </div>
            </div>
            <div class="col-12">
              <p id="modal-power-of-decorators-fixed-desc" class="text-muted text-center mb-0 mt-2">Almost there! Complete this form and click the button below to gain instant&nbsp;access:</p>
            </div>
          </div>
        </div>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>

      <div class="modal-body m-4">
        <div class="container-fluid">
          <div class="row align-items-center text-center">
            <div class="col-12 col-lg-4 mb-4 mb-lg-0">
              
              
                <img loading="lazy" class="img-fluid rounded" src="https://files.realpython.com/media/python-logo.8eb72ea6927b.png" width="1000" height="1000" srcset="/cdn-cgi/image/width=250,format=auto/https://files.realpython.com/media/python-logo.8eb72ea6927b.png 250w, /cdn-cgi/image/width=333,format=auto/https://files.realpython.com/media/python-logo.8eb72ea6927b.png 333w, /cdn-cgi/image/width=500,format=auto/https://files.realpython.com/media/python-logo.8eb72ea6927b.png 500w, /cdn-cgi/image/width=1000,format=auto/https://files.realpython.com/media/python-logo.8eb72ea6927b.png 1000w" sizes="(min-width: 1000px) 207px, (min-width: 580px) 382px, calc(100vw - 134px)" alt="Python Logo">
              
            </div>
            <div class="col">
              <p id="modal-power-of-decorators-fixed-title" class="text-center h3 mb-4">The Power of Python Decorators: Advanced Patterns &amp; Techniques (PDF Guide)</p>

              <form class="col-12" action="/optins/process/" method="post">
                <input type="hidden" name="csrfmiddlewaretoken" value="jaRCD1qNE7h0Rglie9ArcHoUUSahtVK5zZxzbvs2BBfBkDNgTjpQqVixahX4SG29">
                <input type="hidden" name="slug" value="power-of-decorators-fixed">
                <input type="hidden" name="source_path" value="/primer-on-python-decorators/"> 
                <div class="form-group">
                  <input type="email" name="email" class="form-control" placeholder="Email Address" required autofocus>
                </div>
                <button name="submit" type="submit" class="btn btn-primary btn-block text-wrap">Get the Python Decorators Guide »</button>
                <p class="mb-0 mt-2 text-muted text-center"><small>🔒 No spam. We take your privacy seriously.</small></p>
              </form>

            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

        
      
    
      
        
          <div class="modal fade" id="modal-decorators-cheatsheet" tabindex="-1" aria-labelledby="modal-decorators-cheatsheet-title" aria-describedby="modal-decorators-cheatsheet-desc">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">

      <div class="modal-header bg-light pt-3 pb-2">
        <div class="container-fluid">
          <div class="row">
            <div class="col-12">
              <div class="progress" style="height: .5rem;" aria-hidden="true">
                <div class="progress-bar progress-bar-striped progress-bar-animated w-75" role="progressbar"></div>
              </div>
            </div>
            <div class="col-12">
              <p id="modal-decorators-cheatsheet-desc" class="text-muted text-center mb-0 mt-2">Almost there! Complete this form and click the button below to gain instant&nbsp;access:</p>
            </div>
          </div>
        </div>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>

      <div class="modal-body m-4">
        <div class="container-fluid">
          <div class="row align-items-center text-center">
            <div class="col-12 col-lg-4 mb-4 mb-lg-0">
              
              
                <img loading="lazy" class="img-fluid rounded" src="https://files.realpython.com/media/Screenshot_2018-08-22_08.53.54.c0da91f23a6a.png" width="762" height="592" srcset="/cdn-cgi/image/width=190,format=auto/https://files.realpython.com/media/Screenshot_2018-08-22_08.53.54.c0da91f23a6a.png 190w, /cdn-cgi/image/width=254,format=auto/https://files.realpython.com/media/Screenshot_2018-08-22_08.53.54.c0da91f23a6a.png 254w, /cdn-cgi/image/width=381,format=auto/https://files.realpython.com/media/Screenshot_2018-08-22_08.53.54.c0da91f23a6a.png 381w, /cdn-cgi/image/width=762,format=auto/https://files.realpython.com/media/Screenshot_2018-08-22_08.53.54.c0da91f23a6a.png 762w" sizes="(min-width: 1000px) 207px, (min-width: 580px) 382px, calc(100vw - 134px)" alt="Python Decorators Cheatsheet">
              
            </div>
            <div class="col">
              <p id="modal-decorators-cheatsheet-title" class="text-center h3 mb-4">Python Decorators Cheat Sheet (PDF)</p>

              <form class="col-12" action="/optins/process/" method="post">
                <input type="hidden" name="csrfmiddlewaretoken" value="jaRCD1qNE7h0Rglie9ArcHoUUSahtVK5zZxzbvs2BBfBkDNgTjpQqVixahX4SG29">
                <input type="hidden" name="slug" value="decorators-cheatsheet">
                <input type="hidden" name="source_path" value="/primer-on-python-decorators/"> 
                <div class="form-group">
                  <input type="email" name="email" class="form-control" placeholder="Email Address" required autofocus>
                </div>
                <button name="submit" type="submit" class="btn btn-primary btn-block text-wrap">Send Cheat Sheet »</button>
                <p class="mb-0 mt-2 text-muted text-center"><small>🔒 No spam. We take your privacy seriously.</small></p>
              </form>

            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

        
      
    
      
        
          <div class="modal fade" id="modal-primer-on-python-decorators-code" tabindex="-1" aria-labelledby="modal-primer-on-python-decorators-code-title" aria-describedby="modal-primer-on-python-decorators-code-desc">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">

      <div class="modal-header bg-light pt-3 pb-2">
        <div class="container-fluid">
          <div class="row">
            <div class="col-12">
              <div class="progress" style="height: .5rem;" aria-hidden="true">
                <div class="progress-bar progress-bar-striped progress-bar-animated w-75" role="progressbar"></div>
              </div>
            </div>
            <div class="col-12">
              <p id="modal-primer-on-python-decorators-code-desc" class="text-muted text-center mb-0 mt-2">Almost there! Complete this form and click the button below to gain instant&nbsp;access:</p>
            </div>
          </div>
        </div>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>

      <div class="modal-body m-4">
        <div class="container-fluid">
          <div class="row align-items-center text-center">
            <div class="col-12 col-lg-4 mb-4 mb-lg-0">
              
              
                <img loading="lazy" class="img-fluid rounded" src="https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg" width="1920" height="1080" srcset="/cdn-cgi/image/width=480,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 480w, /cdn-cgi/image/width=640,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 640w, /cdn-cgi/image/width=960,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 960w, /cdn-cgi/image/width=1920,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 1920w" sizes="(min-width: 1000px) 207px, (min-width: 580px) 382px, calc(100vw - 134px)" alt="Python Decorators">
              
            </div>
            <div class="col">
              <p id="modal-primer-on-python-decorators-code-title" class="text-center h3 mb-4">Primer on Python Decorators (Sample Code)</p>

              <form class="col-12" action="/optins/process/" method="post">
                <input type="hidden" name="csrfmiddlewaretoken" value="jaRCD1qNE7h0Rglie9ArcHoUUSahtVK5zZxzbvs2BBfBkDNgTjpQqVixahX4SG29">
                <input type="hidden" name="slug" value="primer-on-python-decorators-code">
                <input type="hidden" name="source_path" value="/primer-on-python-decorators/"> 
                <div class="form-group">
                  <input type="email" name="email" class="form-control" placeholder="Email Address" required autofocus>
                </div>
                <button name="submit" type="submit" class="btn btn-primary btn-block text-wrap">Send Code »</button>
                <p class="mb-0 mt-2 text-muted text-center"><small>🔒 No spam. We take your privacy seriously.</small></p>
              </form>

            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

        
      
    
      
        
          <div class="modal fade" id="modal-decorators-qa-2019" tabindex="-1" aria-labelledby="modal-decorators-qa-2019-title" aria-describedby="modal-decorators-qa-2019-desc">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">

      <div class="modal-header bg-light pt-3 pb-2">
        <div class="container-fluid">
          <div class="row">
            <div class="col-12">
              <div class="progress" style="height: .5rem;" aria-hidden="true">
                <div class="progress-bar progress-bar-striped progress-bar-animated w-75" role="progressbar"></div>
              </div>
            </div>
            <div class="col-12">
              <p id="modal-decorators-qa-2019-desc" class="text-muted text-center mb-0 mt-2">Almost there! Complete this form and click the button below to gain instant&nbsp;access:</p>
            </div>
          </div>
        </div>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>

      <div class="modal-body m-4">
        <div class="container-fluid">
          <div class="row align-items-center text-center">
            <div class="col-12 col-lg-4 mb-4 mb-lg-0">
              
              
                <img loading="lazy" class="img-fluid rounded" src="https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg" width="1920" height="1080" srcset="/cdn-cgi/image/width=480,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 480w, /cdn-cgi/image/width=640,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 640w, /cdn-cgi/image/width=960,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 960w, /cdn-cgi/image/width=1920,format=auto/https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg 1920w" sizes="(min-width: 1000px) 207px, (min-width: 580px) 382px, calc(100vw - 134px)" alt="Python Decorators">
              
            </div>
            <div class="col">
              <p id="modal-decorators-qa-2019-title" class="text-center h3 mb-4">Python Decorators Q&amp;A Transcript (PDF)</p>

              <form class="col-12" action="/optins/process/" method="post">
                <input type="hidden" name="csrfmiddlewaretoken" value="jaRCD1qNE7h0Rglie9ArcHoUUSahtVK5zZxzbvs2BBfBkDNgTjpQqVixahX4SG29">
                <input type="hidden" name="slug" value="decorators-qa-2019">
                <input type="hidden" name="source_path" value="/primer-on-python-decorators/"> 
                <div class="form-group">
                  <input type="email" name="email" class="form-control" placeholder="Email Address" required autofocus>
                </div>
                <button name="submit" type="submit" class="btn btn-primary btn-block text-wrap">Send My PDF »</button>
                <p class="mb-0 mt-2 text-muted text-center"><small>🔒 No spam. We take your privacy seriously.</small></p>
              </form>

            </div>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

        
      
    

    
      
<footer class="footer">
  <div class="container">
    
      <div class="mx-auto mt-4 mb-0" style="max-width: 768px;">
        

<div style="display:block;position:relative;">
  <div style="display:block;width:100%;padding-top:12.5%;"></div>
  <div class="rpad rounded border" data-unit="8x1" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;"></div>
</div>
<a class="small text-muted" href="/account/join/" rel="nofollow"><span class="icon baseline mr-1" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--circle-info"/></svg></span>Remove ads</a>


      </div>
    

    <p class="text-center text-muted w-75 mx-auto">© 2012–2024 Real&nbsp;Python&nbsp;⋅ <a href="/newsletter/">Newsletter</a>&nbsp;⋅ <a href="/podcasts/rpp/">Podcast</a>&nbsp;⋅ <a href="https://www.youtube.com/realpython">YouTube</a>&nbsp;⋅ <a href="https://twitter.com/realpython">Twitter</a>&nbsp;⋅ <a href="https://facebook.com/LearnRealPython">Facebook</a>&nbsp;⋅ <a href="https://www.instagram.com/realpython/">Instagram</a>&nbsp;⋅ <a href="/">Python&nbsp;Tutorials</a>&nbsp;⋅ <a href="/search">Search</a>&nbsp;⋅ <a href="/privacy-policy/">Privacy Policy</a>&nbsp;⋅ <a href="/energy-policy/">Energy Policy</a>&nbsp;⋅ <a href="/sponsorships/">Advertise</a>&nbsp;⋅ <a href="/contact/">Contact</a><br><span class="icon baseline text-color-red" aria-hidden="true"><svg aria-hidden="true"><use href="/static/icons.654fd44c148d.svg#solid--heart"/></svg></span> Happy Pythoning!</p>
  </div>
</footer>

    

    

    
    <script>
      (function() {
        var isAndroid = navigator.userAgent.toLowerCase().indexOf("android") > -1;
        if (!isAndroid) {
          return;
        }

        var styles = `
        @font-face {
          font-family: 'DejaVu Sans Mono';
          font-weight: normal;
          font-style: normal;
          font-display: swap;
          src: url('/static/mfonts/dejavu-sans-mono.33f00225f915.woff2') format('woff2'),
               url('/static/mfonts/dejavu-sans-mono.0da77d3739f3.woff') format('woff'),
               url('/static/mfonts/dejavu-sans-mono.c2356fc49835.ttf') format('truetype');
        }
        code, kbd, pre, samp {
          font-family: 'DejaVu Sans Mono', monospace;
        }
        `

        var styleSheet = document.createElement("style")
        styleSheet.type = "text/css"
        styleSheet.innerText = styles
        document.head.appendChild(styleSheet)
      })();
    </script>

    
    
    <script src="/static/jquery.min.2c872dbe60f4.js"></script>
    <script src="/static/popper.min.47dc3aaf2942.js"></script>
    <script src="/static/bootstrap.min.a3b2689424c3.js"></script>

    
    

    <script>
    (function() {
      document.querySelectorAll(".js-search-form-submit").forEach(function(el) {
        el.addEventListener("click", function(e) {
          e.preventDefault();
          e.currentTarget.parentElement.submit();
        })
      });
    })();
    </script>
    <script src="/static/frontend/reader/codeblock.5c8399b698d9.js" async></script>
    <script src="/static/frontend/reader/lightbox.5387b5824229.js" async></script>
    <script src="/static/frontend/reader/platforms-ui.b11202dc6079.js" async></script>
    

    <script src="/static/frontend/components/share-button.717c719a7f4a.js" defer></script>
<script src="/static/frontend/components/copyable-text.bec2bf9b2991.js" defer></script>


    

    
    

    

    
    

    
    

<script>window.rp_prop_id = '58946116052';</script>
<script src="https://srv.realpython.net/tag.js" async></script>



<script src="/static/frontend/reader/toc-refresh.f019e7905d90.js" async></script>

<script id="js-context" type="application/json">{"is_completed": false, "is_bookmarked": false, "api_article_bookmark_url": "/api/v1/articles/primer-on-python-decorators/bookmark/", "api_article_completion_status_url": "/api/v1/articles/primer-on-python-decorators/completion_status/"}</script>
<script src="/static/frontend/reader/completion-status.b5a907485725.js" async></script>






  
    <script id="dsq-count-scr" src="https://realpython.disqus.com/count.js" async></script>
    <script>
      var disqus_config = function () {
        this.page.url = 'https://realpython.com/primer-on-python-decorators/';
        this.page.identifier = 'https://realpython.com/primer-on-python-decorators/';
        this.callbacks.onReady = [function() {
          if (window.onDisqusReady) {
            window.onDisqusReady();
          }
        }];
      };
      var disqus_script_url = 'https://realpython.disqus.com/embed.js';
    </script>
    <script src="/static/frontend/reader/lazy-disqus.3fe3de69e183.js" defer></script>
  


  
  
  <script src="https://cdn.onesignal.com/sdks/web/v16/OneSignalSDK.page.js" defer></script>
  <script>
    window.OneSignalDeferred = window.OneSignalDeferred || [];
    OneSignalDeferred.push(function(OneSignal) {
      OneSignal.init({
        appId: "c0081e20-a523-42bb-b0ac-04c5a9e8bf40",
        safari_web_id: "web.onesignal.auto.337e82fd-eeda-48f8-8fe5-d2f6dec774c2",
        notifyButton: {
          enable: true,
          position: "bottom-left",
          showCredit: false,
          text: {
            "tip.state.unsubscribed": "Receive a notification when we post a new tutorial",
            "tip.state.subscribed": "You're subscribed to new tutorial notifications",
            'tip.state.blocked': "You've blocked notifications",
            'message.prenotify': 'Click to subscribe to notifications',
            "message.action.subscribed": "Great, we'll let you know when the next tutorial comes out!",
            'message.action.resubscribed': "You're subscribed to notifications",
            'message.action.unsubscribed': "You won't receive notifications again",
            'dialog.main.title': 'Manage Site Notifications',
            'dialog.main.button.subscribe': 'SUBSCRIBE',
            'dialog.main.button.unsubscribe': 'UNSUBSCRIBE',
            'dialog.blocked.title': 'Unblock Notifications',
            'dialog.blocked.message': "Follow these instructions to allow notifications:"
          },
          
        },
      });
    });
  </script>
  

  
  <script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Article",
    "headline": "Primer on Python Decorators",
    
    "image": {
      "@type": "ImageObject",
      "url": "https://files.realpython.com/media/Primer-on-Python-Decorators_Watermarked.d0da542fa3fc.jpg",
      "width": 1920,
      "height": 1080
    },
    
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": "https://realpython.com/primer-on-python-decorators/"
    },
    "datePublished": "2024-02-12T14:00:00+00:00",
    "dateModified": "2024-04-09T15:01:21.981701+00:00",
     "publisher": {
      "@type": "Organization",
      "name": "Real Python",
      "logo": {
        "@type": "ImageObject",
        "url": "/static/real-python-logo-square-tiny.b2452b6d3823.png",
        "width": 60,
        "height": 60
      }
    },
    "author": {
      "@type": "Organization",
      "name": "Real Python",
      "url": "https://realpython.com",
      "logo": "/static/real-python-logo-square.146e987bf77c.png"
    },
    "description": "In this tutorial, you\u0027ll look at what Python decorators are and how you define and use them. Decorators can make your code more readable and reusable. Come take a look at how decorators work under the hood and practice writing your own decorators."
  }
  </script>
  


    <script src="/static/frontend/optins/optins.9b3f3d317bfa.js" async></script>
    <script src="/static/frontend/search/autocomplete.eb8dcedc5710.js" async></script>

    

    

    

    

    
<script>
  !function(f,b,e,v,n,t,s)
  {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
  n.callMethod.apply(n,arguments):n.queue.push(arguments)};
  if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
  n.queue=[];t=b.createElement(e);t.async=!0;
  t.src=v;s=b.getElementsByTagName(e)[0];
  s.parentNode.insertBefore(t,s)}(window, document,'script',
  'https://connect.facebook.net/en_US/fbevents.js');
  fbq('init', '2220911568135371');
  fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
  src="https://www.facebook.com/tr?id=2220911568135371&ev=PageView&noscript=1"
/></noscript>


    

    

  <script>(function(){if (!document.body) return;var js = "window['__CF$cv$params']={r:'888dbc3509377309',t:'MTcxNjU1ODQyMS40MzgwMDA='};_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js',document.getElementsByTagName('head')[0].appendChild(_cpo);";var _0xh = document.createElement('iframe');_0xh.height = 1;_0xh.width = 1;_0xh.style.position = 'absolute';_0xh.style.top = 0;_0xh.style.left = 0;_0xh.style.border = 'none';_0xh.style.visibility = 'hidden';document.body.appendChild(_0xh);function handler() {var _0xi = _0xh.contentDocument || _0xh.contentWindow.document;if (_0xi) {var _0xj = _0xi.createElement('script');_0xj.innerHTML = js;_0xi.getElementsByTagName('head')[0].appendChild(_0xj);}}if (document.readyState !== 'loading') {handler();} else if (window.addEventListener) {document.addEventListener('DOMContentLoaded', handler);} else {var prev = document.onreadystatechange || function () {};document.onreadystatechange = function (e) {prev(e);if (document.readyState !== 'loading') {document.onreadystatechange = prev;handler();}};}})();</script></body>
</html>
